#+title: My emacs configuration
#+startup: fold
#+property: header-args:elisp :tangle configuration.el

* Sane defaults
These are the defaults that I deem sane, and that should set before anything else.

#+begin_src elisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)   ;; esc quits the current action

  (setq auto-revert-interval 1              ; Refresh buffers fast
        display-line-numbers-type 'relative ; Show relative line numbers
        default-input-method "TeX"          ; Use TeX when toggling input method
        echo-keystrokes 0.1                 ; Show keystrokes asap
        frame-inhibit-implied-resize 1      ; Don't resize frame implicitly
        inhibit-startup-screen t            ; No splash screen please
        initial-scratch-message nil         ; Clean scratch buffer
        recentf-max-saved-items 10000       ; Show more recent files
        ring-bell-function 'ignore          ; Quiet
        scroll-margin 1                     ; Space between cursor and top/bottom
        sentence-end-double-space nil)      ; No double space

  (dolist (mode '(tool-bar-mode
                  scroll-bar-mode
                  menu-bar-mode))
    (funcall mode 0))

  (dolist (mode '(global-auto-revert-mode
                  global-display-line-numbers-mode))
    (funcall mode t))

  (dolist (mode '(org-mode-hook
                    term-mode-hook
                    shell-mode-hook
                    eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (fset 'yes-or-no-p 'y-or-n-p)
  (set-fringe-mode 10)


#+end_src

Some variables are buffer-local, and should therefore be set using ~setq-default~
in order to set them globally.

#+begin_src elisp
  (setq-default indent-tabs-mode nil              ; Use spaces instead of tabs
                tab-width 4                       ; Smaller tabs
                fill-column 80                    ; Maximum line width
                truncate-lines t                  ; Don't fold lines
                split-width-threshold 160         ; Split verticly by default
                split-height-threshold nil        ; Split verticly by default
                frame-resize-pixelwise t          ; Fine-grained frame resize
                auto-fill-function 'do-auto-fill) ; Auto-fill-mode everywhere
#+end_src

* Elpaca
Install elpaca

 #+begin_src elisp
(defvar elpaca-installer-version 0.4)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil
                              :files (:defaults (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                 ((zerop (call-process "git" nil buffer t "clone"
                                       (plist-get order :repo) repo)))
                 ((zerop (call-process "git" nil buffer t "checkout"
                                       (or (plist-get order :ref) "--"))))
                 (emacs (concat invocation-directory invocation-name))
                 ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                       "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                 ((require 'elpaca))
                 ((elpaca-generate-autoloads "elpaca" repo)))
            (kill-buffer buffer)
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))
 #+end_src

Enable elpaca use-package support

 #+begin_src elisp
;; Install use-package support
(elpaca elpaca-use-package
  ;; Enable :elpaca use-package keyword.
  (elpaca-use-package-mode)
  ;; Assume :elpaca t unless otherwise specified.
  (setq elpaca-use-package-by-default t))

;; Block until current queue processed.
(elpaca-wait)

(require 'bind-key)
 #+end_src

 #+begin_src elisp
(use-package use-package-ensure-system-package)
(elpaca-wait)
 #+end_src
* Keybinds
** General
Yes, the package is called general. It's a keybinding framework.

#+begin_src elisp
  (use-package general
    :diminish
    :commands general-def
    :init
    (general-create-definer oskah/leader-keys
      :states '(normal insert visual emacs)
      :prefix "SPC"
      :non-normal-prefix "C-SPC"))

  ;; Wait until this is setup before loading the rest of the config.
  ;; This is needed for the =:general= flag to work.
  (elpaca-wait)
#+end_src

** Evil
*** Evil mode

#+begin_src elisp
  (use-package evil
    :diminish 
    :init (evil-mode 1)
    :custom
    (evil-want-integration t)
    (evil-want-keybinding nil)
    (evil-want-C-u-scroll t)
    (evil-want-C-i-jump t)
    (evil-undo-system 'undo-tree)
    :general
    ('(normal visual) "gr" 'eval-region)
    (oskah/leader-keys "w" 'evil-window-map)
    :config
    (evil-global-set-key 'normal (kbd "C-g") 'evil-force-normal-state)

    (evil-global-set-key 'normal (kbd "j") 'evil-next-visual-line)
    (evil-global-set-key 'normal (kbd "k") 'evil-previous-visual-line)

    (dolist (mode '(custom-mode
                        eshell-mode
                        git-rebase-mode
                        term-mode))
            (add-to-list 'evil-emacs-state-modes mode)))
#+end_src

#+begin_src elisp
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src
*** Commenter

#+begin_src elisp
  (use-package evil-nerd-commenter
    :config
    (evilnc-default-hotkeys))
#+end_src
*** Machit
Enables pressing =%= to jump between matching pairs. Despite the name, It does
not depend on evil mode.

#+begin_src elisp
  (use-package evil-matchit
    :after evil
    :config
    (global-evil-matchit-mode 1))
#+end_src
*** Surround

#+begin_src elisp
  (use-package evil-surround
    :after evil
    :config
    (global-evil-surround-mode 1))
#+end_src
*** Numbers

#+begin_src elisp
  (use-package evil-numbers
    :general
    ('(normal visual)
      "g=" 'evil-numbers/inc-at-pt-incremental
      "g-" 'evil-numbers/dec-at-pt
      "g+" 'evil-numbers/inc-at-pt))
#+end_src
*** Goggles
Add visual hints to ceirtain evil opperations such as yank.

#+begin_src elisp
  (use-package evil-goggles
    :custom
    (evil-goggles-enable-delete nil)
    :config
    (evil-goggles-mode))
#+end_src
*** Exchange

#+begin_src elisp
  (use-package evil-exchange
    :config
    (evil-exchange-install))
#+end_src
*** Args

#+begin_src elisp
  (use-package evil-args
    :ensure t
    :after evil
    :config
    (define-key evil-inner-text-objects-map "a" 'evil-inner-arg)
    (define-key evil-outer-text-objects-map "a" 'evil-outer-arg)
    (define-key evil-normal-state-map "L" 'evil-forward-arg)
    (define-key evil-normal-state-map "H" 'evil-backward-arg)
    (define-key evil-motion-state-map "L" 'evil-forward-arg)
    (define-key evil-motion-state-map "H" 'evil-backward-arg)
    (define-key evil-normal-state-map "K" 'evil-jump-out-args))
#+end_src
*** Lion

#+begin_src elisp
  (use-package evil-lion
    :config
    (evil-lion-mode))
#+end_src

** Hydra
#+begin_src elisp
  (use-package hydra
    :ensure t
    :commands (hydra-text-scale/body)
    :defer t
    :init
    (oskah/leader-keys
      "ts" '(hydra-text-scale/body :which-key "scale text"))
    :config
    (defhydra hydra-text-scale (:timeout 4)
      "scale text"
      ("k" text-scale-increase "in")
      ("j" text-scale-decrease "out")
      ("r" (text-scale-set 0) "reset")
      ("q" nil "quit" :exit t)))

#+end_src

** Top level keybindings
These are the top level keybindings, which are only used to group other
keybindings in a logical way, and to describe them in the which-key popup.

#+begin_src elisp
  (oskah/leader-keys "m" '(:ignore t :which-key "localleader")
                     "t" '(:ignore t :which-key "toggle")
                     "f" '(:ignore t :which-key "file")
                     "b" '(:ignore t :which-key "buffer")
                     "h" '(:ignore t :which-key "help")
                     "o" '(:ignore t :which-key "open"))
#+end_src

And these are some general keybindings I like

#+begin_src elisp
  (oskah/leader-keys
    ":" '("M-x" . execute-extended-command)
    ";" '("eval-expression" . pp-eval-expression)

    "hb" '("describe keybindings" . describe-bindings)
    "hm" '("describe mode" . describe-mode)

    ;; "wv" '(evil-window-vsplit :which-key "split vertically")
    ;; "wh" '(evil-window-split :which-key "split horizontally")

    "oe" '("open terminal" . eshell)

    "fc" '("open config" . (lambda ()
                             (interactive)
                             (find-file (locate-user-emacs-file "configuration.org")))))

  ;; Scale text
  (general-def 'normal
    "C-=" 'text-scale-increase
    "C--" 'text-scale-decrease)
#+end_src

* Look and feel
** NANO

#+begin_src elisp
  (use-package nano
    :defer t
    :elpaca (nano :host github
                  :repo "rougier/nano-emacs")
    :init
    (setq nano-font-size 13)
    ;; Add nano to load path
    (add-to-list 'load-path (locate-user-emacs-file "elpaca/builds/nano-emacs"))

    ;; (require 'nano-layout)
    (require 'nano-base-colors)
    (require 'nano-faces)
    (require 'nano-theme)

    (add-to-list 'default-frame-alist
                 '(internal-border-width . 10))

    ;; Turns out [[https://www.colorhexa.com/][colorhexa]] is a great resource
    ;; for finding colors that work well together.
    (setq frame-background-mode 'dark
          nano-color-foreground "#e8d6c6"
          nano-color-background "#171717"
          nano-color-highlight  "#c79972"
          nano-color-critical   "#EBCB8B"
          nano-color-salient    "#aac5dd"
          nano-color-strong     "#e3ccb8"
          nano-color-popout     "#c77276"
          nano-color-subtle     "#212121"
          nano-color-faded      "#c79972"
          ;; to allow for toggling of the themes.
          nano-theme-var "dark")

   (call-interactively 'nano-refresh-theme)

      ;; ;; (require 'nano-defaults)
   (require 'nano-modeline))
#+end_src

** All the icons
It is necessary to run ~M-x all-the-icons-install-fonts~ to set up
icon fonts.

#+begin_src elisp
  (use-package all-the-icons
    :if (display-graphic-p))
#+end_src
** Olivetti
#+begin_src elisp
  (use-package olivetti
    :diminish
    :commands olivetti-mode
    :general
    (oskah/leader-keys "to" 'olivetti-mode))
#+end_src

* Startup performance message
A message which says how long it took to load emacs. It can be useful for
knowing how much/if packages slow down the emacs startup.

#+begin_src elisp
  (defun oskah/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                      (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'emacs-startup-hook #'oskah/display-startup-time)
#+end_src

Enable messages about the loading of packages

#+begin_src elisp
  (setq use-package-verbose t)
#+end_src

* Project management
** Magit
#+begin_src elisp
  (use-package magit
    :ensure-system-package
    ((ssh . openssh)
     (git . git))
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
    :general
    (oskah/leader-keys "gg" 'magit-status))
#+end_src
** Forge
#+begin_src elisp
  (use-package forge
    :after magit
    :config
    (setq auth-sources '("~/.authinfo")))
#+end_src
** Projectile
#+begin_src elisp
  (use-package projectile
    :after ivy
    :defer 1
    :commands (projectile-mode projectile-command-map)
    :general
    (oskah/leader-keys "p" 'projectile-command-map)
    :custom
    (projectile-completion-system 'ivy)
    :config
    (projectile-mode 1)
    (when (file-directory-p "~/projects")
      (setq projectile-project-search-path '("~/projects"))
      (projectile-discover-projects-in-search-path)))
#+end_src
*** Projectile counsel
#+begin_src elisp
  (use-package counsel-projectile
    :after (counsel projectile)
    :ensure-system-package (rg . ripgrep)
    :config
    (counsel-projectile-mode))
#+end_src
* Programming
** Rainbow delimiters
#+begin_src elisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
** Rainbow mode
Visualize the colors of color codes

#+begin_src elisp
  (use-package rainbow-mode
    :hook prog-mode)
#+end_src
** LSP

#+begin_src elisp
  (use-package lsp-mode
    :diminish
    :ensure-system-package (zip unzip)
    :commands lsp-deferred
    :custom
    (lsp-keymap-prefix "C-c l")
    (lsp-headerline-breadcrumb-enable nil)
    :config
    (lsp-enable-which-key-integration t))


  (use-package lsp-ui
    :disabled
    :after lsp-mode
    :hook (lsp-mode . lsp-ui-mode))

  (use-package lsp-ivy
    :after (lsp-mode ivy)
    :commands lsp-ivy-workspace-symbol)
#+end_src

** Company

#+begin_src elisp
  (use-package company
    :diminish
    :defer 0
    :custom
    (company-idle-delay 0.0)
    (company-minimum-prefix-length 1)
    :general
    ('company-active-map   ; Allow creating newline during completion
     "M-RET" (lambda ()
               (interactive)
               (company-abort)
               (newline-and-indent)))
    :config
    (global-company-mode 1)
    (setq company-backends (remove 'company-clang company-backends)))

  (use-package company-box
    :diminish
    :hook (company-mode . company-box-mode))
#+end_src

** Languages
*** Elisp

#+begin_src elisp
  (use-package parinfer-rust-mode
    :diminish
    :commands parinfer-rust-mode
    :hook emacs-lisp-mode
    :init
    (setq parinfer-rust-auto-download t))
#+end_src
*** C

#+begin_src elisp
  (use-package c-mode
    :elpaca nil
    :hook ((c-mode c++-mode) . lsp-deferred)
    :init
    (with-eval-after-load 'org
      (add-to-list 'org-babel-load-languages '(C . t))))
#+end_src

* Org mode
** Org

#+begin_src elisp
  (use-package org
    :defer t
    :general
    (oskah/leader-keys org-mode-map "m '" 'org-edit-special)
    :custom
    (org-hide-emphasis-markers t)
    (org-ellipsis " ↴")
    (org-confirm-babel-evaluate nil)
    (org-directory "~/Nextcloud/org_notes/")
    (org-attach-id-dir "~/Nextcloud/org_notes/.attach/")
    ;;(org-format-latex-options (plist-put org-format-latex-options :scale 1.3)) ;; Set scale of preview images
    (org-export-with-tags nil)
    (org-startup-with-inline-images t)
    (org-startup-with-latex-preview t)
    (shr-max-image-proportion 0.6)  ; Smaller max image size
    :config
    (org-babel-do-load-languages
     'org-babel-load-languages
     org-babel-load-languages))

#+end_src

Make the configuration get tangled on save

#+begin_src elisp
  (with-eval-after-load 'org
    (defun oh/org-babel-tangle-config ()
      (when (string-equal (buffer-file-name)
                          (expand-file-name
                           (locate-user-emacs-file "configuration.org")))
        ;; Dynamic scoping to the rescue
        (let ((org-confirm-babel-evaluate nil))
          (org-babel-tangle))))

    (add-hook 'org-mode-hook (lambda ()
                               (add-hook 'after-save-hook #'oh/org-babel-tangle-config))))
#+end_src

The following is some code which allows for using the =:hidden= tag for src blocks
to make them hidden.

#+begin_src elisp
;; (defun individual-visibility-source-blocks ()
;;   "Fold some blocks in the current buffer."
;;   (interactive)
;;   (org-show-block-all)
;;   (org-block-map
;;    (lambda ()
;;      (let ((case-fold-search t))
;;        (when (and
;;               (save-excursion
;;                 (beginning-of-line 1)
;;                 (looking-at org-block-regexp))
;;               (cl-assoc
;;                ':hidden
;;                (cl-third
;;                 (org-babel-get-src-block-info))))
;;          (org-hide-block-toggle))))))

;; (add-hook
;;  'org-mode-hook
;;  (function individual-visibility-source-blocks))
#+end_src

** Evil-org
#+begin_src elisp
  (use-package evil-org
    :diminish
    :after org
    :hook (org-mode .  evil-org-mode)
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+end_src

** Org-modern

#+begin_src elisp
  (use-package org-modern
    :hook (org-mode . org-modern-mode)
    :custom
    (org-modern-priority nil)
    (org-modern-table nil))
#+end_src

** Appear

#+begin_src elisp
  (use-package org-appear
    :hook (org-mode . org-appear-mode)
    :custom
    (setq! org-appear-inside-latex t)
    (setq! org-appear-autosubmarkers t))
#+end_src

** Fragtog

#+begin_src elisp
  (use-package org-fragtog
    :diminish
    :ensure-system-package
      ((latex . texlive-most))
    :hook (org-mode . org-fragtog-mode))
#+end_src

** PDF preview

#+begin_src elisp
  (use-package org-inline-pdf
    :diminish
    ;;:disabled ; TODO: fix. It doesn't work with org 9.5.5
    :ensure-system-package pdf2svg
    :after org
    :hook (org-mode . org-inline-pdf-mode))
#+end_src

** Company org-mode

#+begin_src elisp
  (use-package company-org-block
    :diminish
    :defer t
    :custom
    (company-org-block-edit-style 'auto) ;; 'auto, 'prompt, or 'inline
    :hook ((org-mode . (lambda ()
                         (setq-local company-backends
                                     (cons 'company-org-block company-backends))
                         (company-mode +1)))))
#+end_src

* Misc
** Ivy
Ivy is a completion framework, which replaces the default Emacs
completion framework. It among other things provides a fuzzy search
and completion alternatives.

#+begin_src elisp
  (use-package ivy
   :defer 0
   :config
   (ivy-mode 1))
#+end_src
*** Ivy rich
Show keybinds and doc-strings in the M-x ivy list

#+begin_src elisp
  (use-package ivy-rich
    :after ivy
    :config
    (ivy-rich-mode 1))
#+end_src
** Dired

#+begin_src elisp
  (use-package dired
    :elpaca nil
    :commands (dired dired-jump)
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    :general
    (oskah/leader-keys
      "fd" '(dired-jump :which-key "dired jump"))
    :general
    ('normal 'dired-mode-map
      "h" 'dired-up-directory
      "l" 'dired-find-file))
#+end_src

** Eshell-fish

#+begin_src elisp
  (use-package fish-completion
    :hook (eshell-mode . fish-completion-mode)
    :if (executable-find "fish")
    :config
    (global-fish-completion-mode))
#+end_src
** Undo-tree

#+begin_src elisp
  (use-package undo-tree
    :defer 0
    :diminish
    :config
    (global-undo-tree-mode))
#+end_src
** SQLite
Magit requires sqlite and recomends using =sqlite3=

#+begin_src elisp :lexical no
  (use-package sqlite3
    :defer t
    :ensure-system-package (sqlite3 . sqlite))
#+end_src


** Counsel
#+begin_src elisp
  (use-package counsel
    :config
    (counsel-mode 1)
    :general
    (oskah/leader-keys
     "bb" 'counsel-switch-buffer
     "." 'counsel-find-file))
#+end_src
** Copilot
#+begin_src elisp
  (use-package copilot
    :defer t
    :elpaca (:host github
             :repo "zerolfx/copilot.el"
             :main nil
             :files ("dist" "*.el"))
    :ensure-system-package (node . nodejs)
    ;; :hook (prog-mode . copilot-mode)
    :general
    (oskah/leader-keys "ta" 'copilot-mode)

    :bind (("C-TAB" . 'copilot-accept-completion-by-word)
           ("C-<tab>" . 'copilot-accept-completion-by-word)
           :map copilot-completion-map
           ("<tab>" . 'copilot-accept-completion)
           ("TAB" . 'copilot-accept-completion)))
#+end_src

I don't want copilot to start on emacs startup, but I also want it to be hooked
to ='prog-mode-hook=, which in case is run on startup. I therefore have a /nice/
lambda expression to load hook it after emacs has loaded. I also added a small
delay to make it easier to analyze when packages are loaded as the startup
message is also run on ='emacs-startup-hook=..

#+begin_src elisp
  (add-hook 'emacs-startup-hook
            (lambda ()
              (run-at-time "1 sec" nil
                           (lambda ()
                             (add-hook 'prog-mode-hook 'copilot-mode)
                             (when (derived-mode-p 'prog-mode)
                               (copilot-mode))))))
#+end_src

** ChatGPT

#+begin_src elisp
  (defvar openai-key-memo nil "Memoized OpenAI key")

  (use-package chatgpt-shell
    :commands (chatgpt-shell)
    :custom
    (chatgpt-shell-openai-key
     (lambda ()
       (if openai-key-memo
           openai-key-memo
         (setq openai-key-memo (auth-source-pass-get 'secret "openai-key")))))

    :general
    (oskah/leader-keys
      "og" '("gpt" . chatgpt-shell)))


  (use-package dall-e-shell
    :commands (dall-e-shell)
    :custom
    (chatgpt-shell-openai-key
     (lambda ()
       (if openai-key-memo
           openai-key-memo
         (setq openai-key-memo (auth-source-pass-get 'secret "openai-key")))))
    :general
    (oskah/leader-keys
      "od" '("dall-e" . dall-e-shell)))

  (use-package ob-chatgpt-shell
    :after org
    :config 'ob-chatgpt-shell-setup)
#+end_src

** Editorconfig
#+begin_src elisp
  (use-package editorconfig
    :defer 0
    :config
    (editorconfig-mode 1))
#+end_src
** Helpful
A better help buffer
#+begin_src elisp
  (use-package helpful
    :diminish
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :general
    ('normal "K" 'helpful-at-point)

    (oskah/leader-keys
      "hp" 'describe-package
      "ht" 'describe-theme
      "hv" 'describe-variable
      "hf" 'describe-function
      "hk" 'describe-key)

    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key)
    ([remap describe-command] . helpful-command))
#+end_src

** Which-key
#+begin_src elisp
  (use-package which-key
    :defer 0
    :custom
    (which-key-idle-delay 0.3)
    :config
    (which-key-mode))
#+end_src
** Wakatime

#+begin_src elisp
  (use-package wakatime-mode
    :defer 5
    :config
    (setq wakatime-disable-on-error t)
    (setq wakatime-cli-path "~/.wakatime/wakatime-cli")
    (global-wakatime-mode))
#+end_src

** Keep folders clean
No littering puts the files that packages places in the emacs directory into
=var/= and =etc/= in the emacs directory.

#+begin_src elisp
  (use-package no-littering
    :custom
    (auto-save-file-name-transforms
     `((".*" ,(no-littering-expand-var-file-name "auto-save/") t))))

#+end_src
