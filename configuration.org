#+title: My emacs configuration
#+startup: fold

* Sane defaults
These are the defaults that I deem sane, and that should set before anything else.

#+begin_src elisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)   ;; esc quits the current action

  (setq auto-revert-interval 1            ; Refresh buffers fast
        display-line-numbers-type 'relative
        visible-bell t
        default-input-method "TeX"        ; Use TeX when toggling input method
        echo-keystrokes 0.1               ; Show keystrokes asap
        frame-inhibit-implied-resize 1    ; Don't resize frame implicitly
        inhibit-startup-screen t          ; No splash screen please
        initial-scratch-message nil       ; Clean scratch buffer
        recentf-max-saved-items 10000     ; Show more recent files
        ring-bell-function 'ignore        ; Quiet
        scroll-margin 1                   ; Space between cursor and top/bottom
        sentence-end-double-space nil)     ; No double space

  (dolist (mode '(tool-bar-mode
                  scroll-bar-mode
                  menu-bar-mode))
    (funcall mode 0))

  (dolist (mode '(global-auto-revert-mode
                  global-display-line-numbers-mode))
    (funcall mode t))

  (dolist (mode '(org-mode-hook
                    term-mode-hook
                    shell-mode-hook
                    eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (fset 'yes-or-no-p 'y-or-n-p)

  (set-fringe-mode 10)
#+end_src

Some variables are buffer-local, and should therefore be set using ~setq-default~
in order to set them globally.

#+begin_src elisp
  (setq-default indent-tabs-mode nil   ; Use spaces instead of tabs
                tab-width 4)           ; Tab width
#+end_src

* Elpaca
Install elpaca

 #+begin_src elisp
(defvar elpaca-installer-version 0.4)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil
                              :files (:defaults (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                 ((zerop (call-process "git" nil buffer t "clone"
                                       (plist-get order :repo) repo)))
                 ((zerop (call-process "git" nil buffer t "checkout"
                                       (or (plist-get order :ref) "--"))))
                 (emacs (concat invocation-directory invocation-name))
                 ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                       "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                 ((require 'elpaca))
                 ((elpaca-generate-autoloads "elpaca" repo)))
            (kill-buffer buffer)
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))
 #+end_src

Enable elpaca use-package support

 #+begin_src elisp
;; Install use-package support
(elpaca elpaca-use-package
  ;; Enable :elpaca use-package keyword.
  (elpaca-use-package-mode)
  ;; Assume :elpaca t unless otherwise specified.
  (setq elpaca-use-package-by-default t))

;; Block until current queue processed.
(elpaca-wait)

(require 'bind-key)
 #+end_src

 #+begin_src elisp
(use-package use-package-ensure-system-package)
(elpaca-wait)
 #+end_src
* Keybinds
** General
Yes, the package is called general. It's a keybinding framework.

#+begin_src elisp
  (use-package general
    :commands general-def
    :init
    (general-create-definer oskah/leader-keys
      :states '(normal insert visual emacs)
      :prefix "SPC"
      :non-normal-prefix "C-SPC"))

  ;; Wait until this is setup before loading the rest of the config.
  ;; This is needed for the =:general= flag to work.
  (elpaca-wait)
#+end_src

** Evil mode

#+begin_src elisp
  (use-package evil
    :init (evil-mode 1)
    :custom
    (evil-want-integration t)
    (evil-want-keybinding nil)
    (evil-want-C-u-scroll t)
    (evil-want-C-i-jump t)
    :general
    ('(normal visual) "gr" 'eval-region)
    :config
    (evil-global-set-key 'normal (kbd "C-g") 'evil-force-normal-state)
    (evil-global-set-key 'normal (kbd "C-h") 'evil-window-left)
    (evil-global-set-key 'normal (kbd "C-j") 'evil-window-down)
    (evil-global-set-key 'normal (kbd "C-k") 'evil-window-up)
    (evil-global-set-key 'normal (kbd "C-l") 'evil-window-right)

    (evil-global-set-key 'normal (kbd "C-S-h") 'evil-window-move-far-left)
    (evil-global-set-key 'normal (kbd "C-S-j") 'evil-window-move-very-bottom)
    (evil-global-set-key 'normal (kbd "C-S-k") 'evil-window-move-very-top)
    (evil-global-set-key 'normal (kbd "C-S-l") 'evil-window-move-far-right)

    (evil-global-set-key 'normal (kbd "j") 'evil-next-visual-line)
    (evil-global-set-key 'normal (kbd "k") 'evil-previous-visual-line)

    (dolist (mode '(custom-mode
                        eshell-mode
                        git-rebase-mode
                        term-mode))
            (add-to-list 'evil-emacs-state-modes mode)))
#+end_src

#+begin_src elisp
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src

*** Commenter

#+begin_src elisp
  (use-package evil-nerd-commenter
    :config
    (evilnc-default-hotkeys))
#+end_src

** Hydra
#+begin_src elisp
  (use-package hydra
    :ensure t
    :config
    (defhydra hydra-text-scale (:timeout 4)
      "scale text"
      ("k" text-scale-increase "in")
      ("j" text-scale-decrease "out")
      ("r" (text-scale-set 0) "reset")
      ("q" nil "quit" :exit t))

    (oskah/leader-keys
      "ts" '(hydra-text-scale/body :which-key "scale text")))
#+end_src

* Look and feel
** Top level keybindings
These are the top level keybindings, which are only used to group other
keybindings in a logical way, and to describe them in the which-key popup.

#+begin_src elisp
  (oskah/leader-keys "m" '(:ignore t :which-key "localleader")
                     "t" '(:ignore t :which-key "toggle")
                     "b" '(:ignore t :which-key "buffer")
                     "h" '(:ignore t :which-key "help")
                     "o" '(:ignore t :which-key "open"))
#+end_src

And these are some general keybindings I like

#+begin_src elisp
  (oskah/leader-keys ":" '("M-x" . execute-extended-command)
                     ";" '("eval-expression" . pp-eval-expression))
#+end_src

** NANO

#+begin_src elisp
  (use-package nano
    :defer t
    :elpaca (nano :host github
                  :repo "rougier/nano-emacs")
    :init
    (setq nano-font-size 13)
    ;; Add nano to load path
    (add-to-list 'load-path (locate-user-emacs-file "elpaca/builds/nano-emacs"))

    ;; (require 'nano-layout)
    (require 'nano-base-colors)
    (require 'nano-faces)
    (require 'nano-theme)

    (add-to-list 'default-frame-alist
                 '(internal-border-width . 10))

    ;; (require 'nano-theme-dark)
    ;; (nano-theme-set-dark)

    ;; Turns out [[https://www.colorhexa.com/][colorhexa]] is a great resource
    ;; for finding colors that work well together.
    (setq frame-background-mode 'dark
          nano-color-foreground "#e8d6c6" ;; Snow Storm 3  / nord  6
          nano-color-background "#171717" ;; Polar Night -1 / nord  0
          nano-color-highlight  "#c79972" ;; Polar Night 0 / nord  1
          nano-color-critical   "#EBCB8B";; Aurora        / nord 11
          nano-color-salient    "#aac5dd";; Frost         / nord  9
          nano-color-strong     "#e3ccb8";; Snow Storm 2  / nord  6
          nano-color-popout     "#D08770";; Aurora        / nord 12
          nano-color-subtle     "#212121";; Polar Night 1 / nord  2
          nano-color-faded      "#c79972";;
          ;; to allow for toggling of the themes.
          nano-theme-var "dark")

   (call-interactively 'nano-refresh-theme)

      ;; ;; (require 'nano-defaults)
   (require 'nano-modeline))

#+end_src

** All the icons
It is necessary to run ~M-x all-the-icons-install-fonts~ to set up
icon fonts.

#+begin_src elisp
  (use-package all-the-icons
    :if (display-graphic-p))
#+end_src
** Olivetti
#+begin_src elisp
(use-package olivetti
  :general
  (oskah/leader-keys "to" 'olivetti-mode))
#+end_src
* Misc
** Magit
#+begin_src elisp
  (use-package magit
    :general
    (oskah/leader-keys "gg" 'magit-status))
#+end_src
** Ivy
Ivy is a completion framework, which replaces the default Emacs
completion framework. It among other things provides a fuzzy search
and completion alternatives.

#+begin_src elisp
  (use-package ivy
   :init
   (ivy-mode 1))
#+end_src
*** Ivy rich
Show keybinds and doc-strings in the M-x ivy list

#+begin_src elisp
  (use-package ivy-rich
    :config
    (ivy-rich-mode 1))
#+end_src
** Counsel
#+begin_src elisp
  (use-package counsel
    :config
    (counsel-mode 1)
    :general
    (oskah/leader-keys
     "bb" 'counsel-switch-buffer
     "." 'counsel-find-file))
#+end_src
** Copilot
#+begin_src elisp
  (use-package copilot
    :elpaca (:host github
             :repo "zerolfx/copilot.el"
             :main nil
             :files ("dist" "*.el"))
    :ensure-system-package (node . nodejs)
    :hook (prog-mode . copilot-mode)
    :general
    (oskah/leader-keys "ta" 'global-copilot-mode)

    :bind (("C-TAB" . 'copilot-accept-completion-by-word)
           ("C-<tab>" . 'copilot-accept-completion-by-word)
           :map copilot-completion-map
           ("<tab>" . 'copilot-accept-completion)
           ("TAB" . 'copilot-accept-completion)))
#+end_src

#+RESULTS:
** Editorconfig
#+begin_src elisp
(use-package editorconfig
  :commands editorconfig-mode)
#+end_src
** Helpful
A better help buffer
#+begin_src elisp
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :general
    ('normal "K" 'helpful-at-point)
    :bind
      ([remap describe-function] . counsel-describe-function)
      ([remap describe-variable] . counsel-describe-variable)
      ([remap describe-key] . helpful-key)
      ([remap describe-command] . helpful-command))
#+end_src

Some 'helpful' keybinds

#+begin_src elisp
  (oskah/leader-keys
    "hp" 'describe-package
    "ht" 'describe-theme
    "hv" 'describe-variable
    "hf" 'describe-function
    "hk" 'describe-key)
#+end_src

** Which-key
#+begin_src elisp
  (use-package which-key
    :defer 3
    :custom
    (which-key-idle-delay 0.3)
    :config
    (which-key-mode))
#+end_src
** Wakatime

#+begin_src elisp
  (use-package wakatime-mode
    :defer 5
    :init (global-wakatime-mode)
    :config
    (setq wakatime-disable-on-error t)
    (setq wakatime-cli-path "~/.wakatime/wakatime-cli"))
#+end_src
* Programming
** Rainbow delimiters
#+begin_src elisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
** Rainbow mode
Visualize the colors of color codes

#+begin_src elisp
  (use-package rainbow-mode
    :config
    (rainbow-mode 1))
#+end_src

* Org
** Evil-org
#+begin_src elisp
  (use-package evil-org
    :after org
    :hook (org-mode .  evil-org-mode)
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+end_src

** Org
#+begin_src elisp
  (use-package org
    :general
    (oskah/leader-keys org-mode-map "m '" 'org-edit-special))
#+end_src

** Org-modern

#+begin_src elisp
  (use-package org-modern
    :hook (org-mode . org-modern-mode)
    :after org
    :custom
    (org-modern-priority nil)
    (org-modern-table nil))
#+end_src


