#+title: My Emacs configuration
#+startup: fold
#+property: header-args:elisp :tangle configuration.el

I run Emacs inside a distrobox running arch, and I use =use-package-ensure-system-package= to make sure the required packages are installed. In order to make the distrobox use the host's default applications you can run ~sudo ln -s /usr/bin/distrobox-host-exec /usr/local/bin/xdg-open~ from inside the container.

For future me, [[https://samsai.eu/post/toolbox-based-emacs-flatpak-workflow/][this]] article explains a Toolbox-based Emacs workflow for improved containerization between different projects.

[[https://web.archive.org/web/20210921233717/https://ambrevar.xyz/emacs-eshell/index.html][This]] and [[https://web.archive.org/web/20211017064048/https://ambrevar.xyz/emacs-eshell-versus-shell/index.html][this]] are some nice articles about shell and eshell that can be worth reading.

* Sane defaults
These are the defaults that I deem sane, and that should set before anything else.

#+begin_src elisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)   ;; esc quits the current action

  (setq auto-revert-interval 1              ; Refresh buffers fast
        display-line-numbers-type 'relative ; Show relative line numbers
        use-dialog-box nil                  ; No dialog boxes
        default-input-method "TeX"          ; Use TeX when toggling input method
        echo-keystrokes 0.1                 ; Show keystrokes asap
        frame-inhibit-implied-resize 1      ; Don't resize frame implicitly
        inhibit-startup-screen t            ; No splash screen please
        initial-scratch-message nil         ; Clean scratch buffer
        recentf-max-saved-items 10000       ; Show more recent files
        ring-bell-function 'ignore          ; Quiet
        scroll-margin 1                     ; Space between cursor and top/bottom
        sentence-end-double-space nil)      ; No double space

  (dolist (mode '(tool-bar-mode
                  scroll-bar-mode
                  menu-bar-mode))
    (funcall mode 0))

  (dolist (mode '(global-auto-revert-mode
                  global-display-line-numbers-mode))
    (funcall mode t))

  (dolist (mode '(org-mode-hook
                  image-mode-hook
                  term-mode-hook
                  vterm-mode-hook
                  shell-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (fset 'yes-or-no-p 'y-or-n-p)
  (set-fringe-mode 10)

  (add-hook 'before-save-hook
            'delete-trailing-whitespace)
#+end_src

Some variables are buffer-local, and should therefore be set using ~setq-default~ in order to set them globally.

#+begin_src elisp
  (setq-default indent-tabs-mode nil              ; Use spaces instead of tabs
                tab-width 4                       ; Smaller tabs
                fill-column 80                    ; Maximum line width
                truncate-lines t                  ; Don't fold lines
                frame-resize-pixelwise t          ; Fine-grained frame resize
                auto-fill-function 'do-auto-fill) ; Auto-fill-mode everywhere
#+end_src


Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets. It is optional.

#+begin_src elisp
(setq user-full-name "Oskar Haukeb√∏e"
      user-mail-address "ohaukeboe@pm.me")
#+end_src

* Startup performance

#+begin_src elisp
  (setq gc-cons-threshold 100000000)

  (add-hook 'after-init-hook
            (lambda ()
              (setq gc-cons-threshold 1000000)))
#+end_src

** Startup performance message
A message which says how long it took to load emacs. It can be useful for
knowing how much/if packages slow down the emacs startup.

#+begin_src elisp
   (defun oskah/display-startup-time ()
       (message "Emacs loaded in %s with %d garbage collections."
          (format "%.2f seconds"
                  (float-time
                     (time-subtract after-init-time before-init-time)))
          gcs-done))

   (add-hook 'emacs-startup-hook #'oskah/display-startup-time) ;
  ;; (setq use-package-verbose t)
#+end_src

* Elpaca
Install elpaca

 #+begin_src elisp
   (defvar elpaca-installer-version 0.4)
   (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
   (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
   (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
   (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                                 :ref nil
                                 :files (:defaults (:exclude "extensions"))
                                 :build (:not elpaca--activate-package)))
   (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
          (build (expand-file-name "elpaca/" elpaca-builds-directory))
          (order (cdr elpaca-order))
          (default-directory repo))
     (add-to-list 'load-path (if (file-exists-p build) build repo))
     (unless (file-exists-p repo)
       (make-directory repo t)
       (when (< emacs-major-version 28) (require 'subr-x))
       (condition-case-unless-debug err
           (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                    ((zerop (call-process "git" nil buffer t "clone"
                                          (plist-get order :repo) repo)))
                    ((zerop (call-process "git" nil buffer t "checkout"
                                          (or (plist-get order :ref) "--"))))
                    (emacs (concat invocation-directory invocation-name))
                    ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                          "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                    ((require 'elpaca))
                    ((elpaca-generate-autoloads "elpaca" repo)))
               (kill-buffer buffer)
             (error "%s" (with-current-buffer buffer (buffer-string))))
         ((error) (warn "%s" err) (delete-directory repo 'recursive))))
     (unless (require 'elpaca-autoloads nil t)
       (require 'elpaca)
       (elpaca-generate-autoloads "elpaca" repo)
       (load "./elpaca-autoloads")))
   (add-hook 'after-init-hook #'elpaca-process-queues)
   (elpaca `(,@elpaca-order))
 #+end_src

Enable elpaca use-package support

 #+begin_src elisp
   ;; Install use-package support
   (elpaca elpaca-use-package
     ;; Enable :elpaca use-package keyword.
     (elpaca-use-package-mode)
     ;; Assume :elpaca t unless otherwise specified.
     (setq elpaca-use-package-by-default t)
     (setq package-user-dir (expand-file-name "builds" elpaca-directory)))
     ;; (setq use-package-always-defer t))

   ;; Block until current queue processed.
   (elpaca-wait)

   ;;(require 'bind-key)
 #+end_src

 #+begin_src elisp
(use-package use-package-ensure-system-package)
(elpaca-wait)
 #+end_src

* Keybinds
** General
Yes, the package is called general. It's a keybinding framework.

#+begin_src elisp
  (use-package general
    :diminish
    :commands general-def
    :init
    (general-create-definer oskah/leader-keys
      :states '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC"))

  ;; Wait until this is setup before loading the rest of the config.
  ;; This is needed for the =:general= flag to work.
  (elpaca-wait)
#+end_src

** Evil
*** Evil mode

#+begin_src elisp
  (use-package evil
    :diminish
    :defer 0
    :custom
    (evil-want-integration t)
    (evil-want-keybinding nil)
    (evil-want-C-u-scroll t)
    (evil-want-C-i-jump t)
    (evil-undo-system 'undo-redo)

    :general
    ('(normal visual) "gr" 'eval-region)
    ('insert "S-<return>" 'newline-and-indent)  ; Make S-RET always do newline-and-indent
    (oskah/leader-keys
      "we" '(evil-window-map :which-key "evil window map"))

    :config
    (evil-mode 1)
    (evil-global-set-key 'normal (kbd "C-g") 'evil-force-normal-state)

    (evil-global-set-key 'normal (kbd "j") 'evil-next-visual-line)
    (evil-global-set-key 'normal (kbd "k") 'evil-previous-visual-line)

    (dolist (mode '(custom-mode
                        eshell-mode
                        git-rebase-mode
                        term-mode))
            (add-to-list 'evil-emacs-state-modes mode)))
#+end_src

#+begin_src elisp
  (use-package evil-collection
    :after evil
    :demand
    :config
    (evil-collection-init))
#+end_src

*** Commenter

#+begin_src elisp
  (use-package evil-nerd-commenter
    :after evil
    :config
    (evilnc-default-hotkeys))
#+end_src
*** Matchit
Enables pressing =%= to jump between matching pairs. Despite the name, It does
not depend on evil mode.

#+begin_src elisp
  (use-package evil-matchit
    :after evil
    :config
    (global-evil-matchit-mode 1))
#+end_src
*** Surround

#+begin_src elisp
  (use-package evil-surround
    :after evil
    :config
    (global-evil-surround-mode 1))
#+end_src

*** Numbers

#+begin_src elisp
  (use-package evil-numbers
    :general
    ('(normal visual)
      "g=" 'evil-numbers/inc-at-pt-incremental
      "g-" 'evil-numbers/dec-at-pt
      "g+" 'evil-numbers/inc-at-pt))
#+end_src

*** Goggles
Add visual hints to ceirtain evil opperations such as yank.

#+begin_src elisp
  (use-package evil-goggles
    :after evil
    :custom
    (evil-goggles-enable-delete nil)
    :config
    (evil-goggles-mode))
#+end_src

*** Exchange

#+begin_src elisp
  (use-package evil-exchange
    :after evil
    :config
    (evil-exchange-install))
#+end_src
*** Args

#+begin_src elisp
  (use-package evil-args
    :after evil
    :config
    (define-key evil-inner-text-objects-map "a" 'evil-inner-arg)
    (define-key evil-outer-text-objects-map "a" 'evil-outer-arg)
    (define-key evil-normal-state-map "L" 'evil-forward-arg)
    (define-key evil-normal-state-map "H" 'evil-backward-arg)
    (define-key evil-motion-state-map "L" 'evil-forward-arg)
    (define-key evil-motion-state-map "H" 'evil-backward-arg))
#+end_src
*** Lion

#+begin_src elisp
  (use-package evil-lion
    :after evil
    :general
    ('(normal visual) "g l" 'evil-lion-left
                      "g L" 'evil-lion-right)
    :config
    (evil-lion-mode))
#+end_src

** Hydra
#+begin_src elisp
  (use-package hydra
    :defer 0
    :commands (defhydra))
#+end_src

** Top level keybindings
These are the top level keybindings, which are only used to group other
keybindings in a logical way, and to describe them in the which-key popup.

#+begin_src elisp
  (oskah/leader-keys "m" '(:ignore t :wk "localleader")
                     "t" '(:ignore t :wk "toggle")
                     "f" '(:ignore t :wk "file")
                     "s" '(:ignore t :wk "spell")
                     "b" '(:ignore t :wk "buffer")
                     "h" '(:ignore t :wk "help")
                     "o" '(:ignore t :wk "open"))
#+end_src

And these are some general keybindings I like

#+begin_src elisp
  (oskah/leader-keys
    ":" '("M-x" . execute-extended-command)
    ";" '("eval-expression" . pp-eval-expression)
    "." '("find file" . find-file)

    "hc" '("describe char" . describe-char)
    "hB" '("describe keybindings" . describe-bindings)
    "hM" '("show manual" . info-display-manual)
    "hm" '("describe mode" . describe-mode)
    "hr" '("rebuild config" . (lambda ()
                                (interactive)
                                (org-babel-tangle-file
                                 (locate-user-emacs-file "configuration.org"))))

    "bk" '(kill-current-buffer :which-key "kill current buffer")
    "br" '(revert-buffer :which-key "revert buffer")

    ;; "wv" '(evil-window-vsplit :which-key "split vertically")
    ;; "wh" '(evil-window-split :which-key "split horizontally")

    "oe" '("open terminal" . eshell)

    "fc" '("open config" . (lambda ()
                             (interactive)
                             (find-file (locate-user-emacs-file "configuration.org")))))

  (general-def 'normal
    "C-=" 'text-scale-increase
    "C--" 'text-scale-decrease)
#+end_src

** Window management

#+begin_src elisp
  (with-eval-after-load 'evil
    (winner-mode 1)
    (defhydra oh/window-resize (:timeout 2)
      "resize window"
      ("h" evil-window-decrease-width "decrease width")
      ("j" evil-window-decrease-height "decrease height")
      ("k" evil-window-increase-height "increase height")
      ("l" evil-window-increase-width "increase width")
      ("H" (evil-window-decrease-width 10) "decrease width")
      ("J" (evil-window-decrease-height 10) "decrease height")
      ("K" (evil-window-increase-height 10) "increase height")
      ("L" (evil-window-increase-width 10) "increase width")
      ("q" nil "quit"))

    (oskah/leader-keys
      "wn" '(evil-window-new :wk "new window")
      "ws" '(evil-window-split :wk "horizontal split")
      "wv" '(evil-window-vsplit :wk "vertical split")
      "wd" '(evil-window-delete :wk "delete window")
      "wo" '(delete-other-windows :wk "delete other windows")
      "w=" '(balance-windows :wk "balance windows")
      "wx" '(evil-window-exchange :wk "exchange windows")

      "wh" '(evil-window-left :wk "move left")
      "wj" '(evil-window-down :wk "move down")
      "wk" '(evil-window-up :wk "move up")
      "wl" '(evil-window-right :wk "move right")
      "wH" '(evil-window-move-far-left :wk "move to far left")
      "wJ" '(evil-window-move-very-bottom :wk "move to very bottom")
      "wK" '(evil-window-move-very-top :wk "move to very top")
      "wL" '(evil-window-move-far-right :wk "move to far right")

      "wr" '(evil-window-rotate-downwards :wk "rotate downwards")
      "wR" '(evil-window-rotate-upwards :wk "rotate upwards")

      "wz" '(oh/window-resize/body :wk "resize window")

      "wu" '(winner-undo :wk "undo window change")
      "wU" '(winner-redo :wk "redo window change")

      "qf" '(delete-frame :wk "delete frame")
      "qF" '(delete-other-frames :wk "delete other frames")
      "qe" '(kill-emacs :wk "kill emacs")
      "qr" '(restart-emacs :wk "restart emacs")))

#+end_src

* Look and feel
** General

#+begin_src elisp
  (add-to-list 'default-frame-alist
               '(internal-border-width . 10))
#+end_src

** Fonts

#+begin_src elisp
  (custom-theme-set-faces
   'user
   '(default ((t (:family "Roboto Mono" :height 130))))
   '(fixed-pitch ((t (:family "Roboto Mono" :height 0.9))))
   '(variable-pitch ((t (:family "Roboto Serif" :height 1.3))))
   '(italic ((t (:slant italic :inherit nil)))))

  (with-eval-after-load 'nano-theme
    (set-face-attribute 'nano-strong nil
                        :weight 'semi-bold))
#+end_src

** NANO
I find that [[https://github.com/rougier/nano-modeline][nano modeline]] looks very good. I have also installed the [[https://github.com/rougier/nano-theme][nano theme]]
and then simply changed all the colors in order to have a properly dark theme.
When finding these colors I found the [[https://www.colorhexa.com/][colorhexa]] website to be a great resource.

#+begin_src elisp
  (use-package nano-theme
    :demand
    :custom
    (nano-dark-foreground "#e8d6c6")
    (nano-dark-background "#171717")
    (nano-dark-highlight  "#2b2b2b")
    (nano-dark-critical   "#EBCB8B")
    (nano-dark-salient    "#aac5dd")
    (nano-dark-strong     "#e3ccb8")
    (nano-dark-popout     "#d79c9e")
    (nano-dark-subtle     "#212121")
    (nano-dark-faded      "#c69a72")

    (nano-light-background "#fafafa")
    :init
    (load-theme 'nano-dark t)
    :commands (oh/cycle-themes)
    :general
    (oskah/leader-keys
      "tt" (list (oh/cycle-themes) :wk "cycle themes"))
    :config

    ;; (defun oh/set-org-faces ()
    ;;   "Make org source blocks have the same background as the default face."
    ;;   (with-eval-after-load 'org-faces
    ;;    (set-face-attribute 'org-block nil :background (face-background 'default))))

    ;; (oh/set-org-faces)

    (defun oh/cycle-themes ()
      "Returns a function that lets you cycle your themes."
      (let ((themes '(nano-dark nano-light)))
        (lambda ()
          (interactive)
          ;; Rotates the theme cycle and changes the current theme.
          (let ((rotated (nconc (cdr themes) (list (car themes)))))
            (load-theme (car (setq themes rotated)) t))
          ;; (oh/set-org-faces)
          (message (concat "Switched to " (symbol-name (car themes))))))))
#+end_src

#+begin_src elisp
  (use-package nano-modeline
    :init
    (nano-modeline-mode 1))
#+end_src

#+begin_src elisp
  (use-package nano-agenda
    :disabled       ; It's probably gonna be useful when I start using org-agenda
    :commands (nano-agenda))
#+end_src

** All the icons
It is necessary to run ~M-x all-the-icons-install-fonts~ to set up
icon fonts.

#+begin_src elisp
  (use-package all-the-icons
    :defer t
    :if (display-graphic-p))
#+end_src

** Olivetti
#+begin_src elisp
  (use-package olivetti
    :diminish
    :hook (org-mode . olivetti-mode)
    :commands olivetti-mode
    :general
    (oskah/leader-keys "to" 'olivetti-mode))
#+end_src

* Project management
** Magit

#+begin_src elisp
  (use-package magit
    :ensure-system-package
    ((ssh . openssh)
     (git . git))
    :hook
    (git-commit-mode . evil-insert-state)
    :custom
    (magit-display-buffer-function
     #'magit-display-buffer-same-window-except-diff-v1)
    :general
    (oskah/leader-keys "gg" 'magit-status))
#+end_src

** Forge

#+begin_src elisp
  (use-package forge
    :after magit
    :diminish
    :config
    (setq auth-sources '("~/.authinfo")))
#+end_src

** Projectile

#+begin_src elisp
  (use-package projectile
    :after vertico
    :ensure-system-package (rg . ripgrep)
    :diminish
    :defer 1
    :commands (projectile-mode projectile-command-map)
    :general
    (oskah/leader-keys
      "p" 'projectile-command-map
      "SPC" 'projectile-find-file)
    :config
    (projectile-mode 1)
    (when (file-directory-p "~/projects")
      (setq projectile-project-search-path '("~/projects"))
      (projectile-discover-projects-in-search-path)))
#+end_src
*** Projectile counsel
#+begin_src elisp
  (use-package counsel-projectile
    :after (counsel projectile)
    :diminish
    :disabled
    :ensure-system-package (rg . ripgrep)
    :config
    (counsel-projectile-mode))
#+end_src
* Programming
** Rainbow delimiters
#+begin_src elisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
** Tree-sitter
Automatically install and use tree-sitter major modes in Emacs 29+. If the tree-sitter version can‚Äôt be used, fall back to the original major mode.

#+begin_src elisp :lexical no
  (use-package treesit-auto
    :if (>= emacs-major-version 29)
    :defer 0
    :custom
    (treesit-auto-install t)
    :config
    (global-treesit-auto-mode))
#+end_src

** Rainbow mode
Visualize the colors of color codes

#+begin_src elisp
  (use-package rainbow-mode
    :hook prog-mode)
#+end_src
** LSP

#+begin_src elisp
  (use-package lsp-mode
    :diminish
    :ensure-system-package (zip unzip)
    :commands lsp-deferred
    :custom
    (lsp-keymap-prefix "C-c l")
    (lsp-headerline-breadcrumb-enable nil))


  (use-package lsp-ui
    :after lsp-mode
    :custom
    (lsp-uio-doc-show-with-cursor nil)
    (lsp-uio-doc-show-with-mouse nil)
    :hook (lsp-mode . lsp-ui-mode)
    :general
    (oskah/leader-keys
      "cfr" 'lsp-ui-peek-find-references :wk "find references"
      "cfd" 'lsp-ui-peek-find-definitions :wk "find definitions"
      "cfi" 'lsp-ui-peek-find-implementation :wk "find implementations"
      "cfs" 'lsp-ui-peek-find-workspace-symbol :wk "find workspace symbol"
      "cdf" 'lsp-ui-doc-focus-frame :wk "focus frame"
      "cdd" 'lsp-ui-doc-show :wk "show documentation"
      "cdc" 'lsp-ui-doc-hide :wk "hide documentation")

    ('normal 'lsp-ui-mode-map
      "K" 'lsp-ui-doc-show :wk "show documentation"))


  (use-package consult-lsp
    :after lsp-mode)
#+end_src
** Flycheck

#+begin_src elisp :lexical no
  (use-package flycheck
    :defer 1
    :custom
    (flycheck-emacs-lisp-initialize-packages t)
    :config
    (global-flycheck-mode)

    ;; Disable checkdoc for elisp. This is useful for org-mode source blocks.
    ;; but will also disable checkdoc for elisp files.
    (defun my-org-mode-setup ()
      (setq-local flycheck-disabled-checkers '(emacs-lisp-checkdoc)))
    (add-hook 'emacs-lisp-mode-hook #'my-org-mode-setup))

#+end_src

** Languages
*** Elisp

#+begin_src elisp
  (use-package parinfer-rust-mode
    :diminish
    :commands parinfer-rust-mode
    :hook emacs-lisp-mode
    :init
    (setq parinfer-rust-auto-download t))
#+end_src
*** C

#+begin_src elisp
  (use-package c-mode
    :elpaca nil
    :hook ((c-mode c++-mode c-ts-mode c++-ts-mode) . lsp-deferred)
    :init
    (with-eval-after-load 'org
      (add-to-list 'org-babel-load-languages '(C . t))))
#+end_src
*** Maude

#+begin_src elisp
  (use-package maude-mode
    :ensure-system-package maude
    :mode "\\.maude\\'"
    :config
    (setq maude-indent 2))
#+end_src
*** Fish

#+begin_src elisp :lexical no
  (use-package fish-mode
    :mode "\\.fish\\'")
#+end_src

*** Plantuml

#+begin_src elisp :lexical no
  (use-package plantuml-mode
    :ensure-system-package
    (dot . graphviz)
    (plantuml)
    :init
    (with-eval-after-load 'org
      (add-to-list 'org-src-lang-modes
                   '("plantuml" . plantuml))
      (add-to-list 'org-babel-load-languages
                   '(plantuml . t)))

    :custom
    (plantuml-default-exec-mode 'executable)
    (org-plantuml-exec-mode 'plantuml)
    :mode
    ("\\.plantuml\\'" . plantuml-mode)
    ("\\.puml\\'" . plantuml-mode)
    :config
    (setq plantuml-output-type "png"))
#+end_src

#+begin_src elisp :lexical no
  (use-package flycheck-plantuml
    :after plantuml-mode
    :custom
    (flycheck-plantuml-executable "plantuml")
    :config
    (flycheck-plantuml-setup))
#+end_src

*** Latex

#+begin_src elisp :lexical no
  (use-package auctex
    :mode ("\\.tex\\'" . latex-mode)
    :custom
    (TeX-auto-save t)
    (TeX-parse-self t)
    (TeX-master nil)
    (TeX-view-program-selection '((output-pdf "PDF Tools"))))
    ;; (TeX-source-correlate-start-server t)

    ;; :config)
    ;; Update PDF buffers after successful LaTeX runs
    ;; (add-hook 'TeX-after-compilation-finished-functions
    ;;            #'TeX-revert-document-buffer))
#+end_src

*** Kotlin

#+begin_src elisp :lexical no
  (use-package kotlin-mode
    :hook (kotlin-mode . lsp-deferred)
    :mode "\\.kt\\'") ; if you want this mode to be auto-enabled

  (use-package kotlin-ts-mode
    :mode "\\.kt\\'") ; if you want this mode to be auto-enabled
#+end_src

* Org mode
** Org

#+begin_src elisp
  (use-package org
    :defer t
    :general
    (oskah/leader-keys org-mode-map "m '" 'org-edit-special)
    :hook
    (org-mode . variable-pitch-mode)
    (org-mode . (lambda () (auto-fill-mode 0)))
    (org-mode . (lambda () (visual-line-mode 1)))
    :custom-face
    (org-block
     ((t (:foreground unspecified
          :background ,(face-background 'default)
          :inherit fixed-pitch))))
    (org-italic
     ((t (:inherit (variable-pitch italic)))))
    (org-code
     ((t (:inherit (shadow fixed-pitch)))))
    (org-indent
     ((t (:inherit (org-hide fixed-pitch)))))
    (org-verbatim
     ((t (:inherit (shadow fixed-pitch)))))
    (org-special-keyword
     ((t (:inherit (font-lock-comment-face fixed-pitch)))))
    (org-meta-line
     ((t (:inherit (font-lock-comment-face fixed-pitch)))))
    (org-checkbox
     ((t (:inherit fixed-pitch))))
    (org-table
     ((t (:inherit (nano-faded fixed-pitch)))))
    :custom
    (org-startup-indented t)
    (org-attach-use-inheritance t)   ; Make sure attachments are
                                     ; inherited throuch headings
    (org-hide-emphasis-markers t)
    (org-ellipsis " ‚Ü¥")
    (org-confirm-babel-evaluate nil) ; Don't prompt me to confirm
                                     ; everytime I want to
                                     ; evaluate a block
    (org-directory "~/Nextcloud/org_notes/")
    (org-attach-id-dir "~/Nextcloud/org_notes/.attach/")
    ;;(org-format-latex-options
    ;;  (plist-put org-format-latex-options :scale 1.3) ; Set scale ; of preview images
    (org-export-with-tags nil)
    (org-startup-with-inline-images t)
    (org-startup-with-latex-preview t)
    (org-startup-folded 'content)    ; Start org-mode with everything
                                     ; folded
    (shr-max-image-proportion 0.6)   ; Smaller max image size
    :general
    (oskah/leader-keys org-mode-map
      "ma" '(:ignore t :wk "attachments")
      "mau" '(org-attach-url :wk "attach URL")
      "mas" '(org-attach-sync :wk "sync attachments")
      "maS" '(org-attach-set-directory :wk "set attachment directory")
      "mao" '(org-attach-open :wk "open attachment")
      "me" '(org-export-dispatch :wk "export"))

    :config
    (org-babel-do-load-languages
     'org-babel-load-languages
     org-babel-load-languages))
#+end_src

When evaluating a source block which generates an image the image will usually not be rendered immediately. This fixes that

#+begin_src elisp :lexical no
  (defun my/org-babel-after-execute-refresh-images ()
    "Refresh inline images after a src block is executed."
    (org-redisplay-inline-images))

  (add-hook 'org-babel-after-execute-hook
            'my/org-babel-after-execute-refresh-images)

#+end_src

Make the configuration get tangled on save

#+begin_src elisp
  (with-eval-after-load 'org
    (defun oh/org-babel-tangle-config ()
      (when (string-equal (buffer-file-name)
                          (expand-file-name
                           (locate-user-emacs-file "configuration.org")))
        ;; Dynamic scoping to the rescue
        (let ((org-confirm-babel-evaluate nil))
          (org-babel-tangle))))

    (add-hook 'org-mode-hook (lambda ()
                               (add-hook 'after-save-hook #'oh/org-babel-tangle-config))))
#+end_src

The following is some code which allows for using the =:hidden= tag for src blocks
to make them hidden.

#+begin_src elisp
;; (defun individual-visibility-source-blocks ()
;;   "Fold some blocks in the current buffer."
;;   (interactive)
;;   (org-show-block-all)
;;   (org-block-map
;;    (lambda ()
;;      (let ((case-fold-search t))
;;        (when (and
;;               (save-excursion
;;                 (beginning-of-line 1)
;;                 (looking-at org-block-regexp))
;;               (cl-assoc
;;                ':hidden
;;                (cl-third
;;                 (org-babel-get-src-block-info))))
;;          (org-hide-block-toggle))))))

;; (add-hook
;;  'org-mode-hook
;;  (function individual-visibility-source-blocks))
#+end_src

** Evil-org

#+begin_src elisp
  (use-package evil-org
    :diminish
    :after org
    :hook (org-mode .  evil-org-mode)
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+end_src

** Org-modern

#+begin_src elisp
  (use-package org-modern
    :hook (org-mode . org-modern-mode)
    :custom
    (org-modern-priority nil)
    (org-modern-table nil)
    (org-modern-list
       '((?- . "‚Ä¢")
         ;;(?* . "‚Ä¢")
         (?+ . "‚Ä£"))))
#+end_src

** Org-modern indent

#+begin_src elisp
  (use-package org-modern-indent
    :after org
    :elpaca (org-modern-indent
             :type git
             :host github
             :repo "jdtsmith/org-modern-indent")
    :config ; add late to hook
    (add-hook 'org-mode-hook #'org-modern-indent-mode 90)
    (set-face-attribute 'org-modern-bracket-line nil
                        :family "Roboto Mono"
                        :weight 'regular))
#+end_src

** Appear

#+begin_src elisp
  (use-package org-appear
    :hook (org-mode . org-appear-mode)
    :custom
    (setq! org-appear-inside-latex t)
    (setq! org-appear-autosubmarkers t))
#+end_src

** Fragtog

#+begin_src elisp
  (use-package org-fragtog
    :diminish
    :ensure-system-package
      ((latex . texlive-most))
    :hook (org-mode . org-fragtog-mode))
#+end_src

** PDF preview

#+begin_src elisp
  (use-package org-inline-pdf
    :diminish
    ;;:disabled ; TODO: fix. It doesn't work with org 9.5.5
    :ensure-system-package pdf2svg
    :after org
    :hook (org-mode . org-inline-pdf-mode))
#+end_src

** Download

#+begin_src elisp
  (use-package org-download
    ;:demand
    :after org
    :ensure-system-package (wl-copy . wl-clipboard)
    :custom
    (org-download-method 'attach)
    :general
    (oskah/leader-keys org-mode-map
      "map" 'org-download-clipboard
      "maf" 'org-download-screenshot
      "mar" 'org-download-rename-at-point))

#+end_src

** Company org-mode

#+begin_src elisp
  (use-package company-org-block
    :diminish
    :disabled
    :defer t
    :custom
    (company-org-block-edit-style 'auto) ;; 'auto, 'prompt, or 'inline
    :hook ((org-mode . (lambda ()
                         (setq-local company-backends
                                     (cons 'company-org-block company-backends))
                         (company-mode +1)))))
#+end_src

** Src block completion

#+begin_src elisp
  (use-package org-block-capf
    :elpaca
    (org-block-capf :type git :host github :repo "xenodium/org-block-capf")
    :hook
    (org-mode . org-block-capf-add-to-completion-at-point-functions))
#+end_src

** Roam

#+begin_src elisp
  (use-package org-roam
    :custom
    (org-roam-node-display-template "${title:*} ${tags:10}")
    (org-roam-directory (file-truename "~/Nextcloud/org_notes/roam"))
    (org-roam-capture-templates
              '(("d" "default" plain "%?"
                   :target
                        (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
                   :unnarrowed t
                  ("r" "reference" plain "%?"
                       :if-new
                       (file+head "references/%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: %^{filetags}\n")
                       :immediate-finish t
                       :unnarrowed t))))
    :general
    (oskah/leader-keys
      "nf" 'org-roam-node-find
      "nc" 'org-roam-capture
      "ng" 'org-roam-graph
      "ni" 'org-roam-node-insert
      "nl" 'org-roam-buffer-toggle)
    :config
    (org-roam-db-autosync-mode 1))

#+end_src

** Noter

#+begin_src elisp
  (use-package org-noter
    :general
    (oskah/leader-keys 'org-mode-map
      "ne" '(org-noter :which-key "org-noter"))
    ('(normal visual insert emacs)
      'org-noter-doc-mode-map
     "i" '(org-noter-insert-note :which-key "insert note"))
    :custom
    (org-noter-auto-save-last-location t)
    (org-noter-notes-search-path
     '("~/Nextcloud/org_notes" "~/Nextcloud/org_notes/roam/bibliography")))
#+end_src

* Completion frameworks
** Vertico

#+begin_src elisp
  (use-package vertico
    :defer 0
    :config
    (vertico-mode))
#+end_src

Allow using different vertico configurations for different prompts.

#+begin_src elisp
  (use-package vertico-multiform
    :elpaca nil
    :load-path
    (lambda () (expand-file-name "vertico/extensions" elpaca-builds-directory))
    :after vertico)
#+end_src

Allow displaying the vertico completions in a grid

#+begin_src elisp :lexical no
  (use-package vertico-grid
    :elpaca nil
    :load-path
    (lambda ()
      (expand-file-name "vertico/extensions" elpaca-builds-directory))
    :after vertico)
#+end_src

** Company

#+begin_src elisp
  (use-package company
    :diminish
    :disabled
    :defer 0
    :custom
    (company-idle-delay 0.3)
    (company-minimum-prefix-length 2)
    :general
    ('company-active-map   ; Allow creating newline during completion
     "M-RET" (lambda ()
               (interactive)
               (company-abort)
               (newline-and-indent)))
    :config
    (global-company-mode 1)
    (setq company-backends (remove 'company-clang company-backends)))

  (use-package company-box
    :diminish
    :hook (company-mode . company-box-mode))
#+end_src

** Corfu

#+begin_src elisp :lexical no
  (use-package corfu
    :defer 0
    :custom
    ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                 ;; Enable auto completion
    ;; (corfu-separator ?\s)          ;; Orderless field separator
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    (corfu-preselect 'first)      ;; Preselect the prompt
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin

    ;; Enable Corfu only for certain modes.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.
    ;; This is recommended since Dabbrev can be used globally (M-/).
    ;; See also `corfu-exclude-modes'.
    :config
    (global-corfu-mode)

    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    (setq tab-always-indent 'complete))


  (use-package corfu-popupinfo
    :after corfu
    :elpaca nil
    ;:custom
    ;(corfu-popupinfo-delay (1.0 0.5))
    :load-path
    (lambda ()
      (expand-file-name "corfu/extensions" elpaca-builds-directory))
    :config
    (corfu-popupinfo-mode))

  (use-package corfu-history
    :after corfu
    :elpaca nil
    :load-path
    (lambda ()
      (expand-file-name "corfu/extensions" elpaca-builds-directory))
    :config
    (corfu-history-mode))
#+end_src

** Cape

#+begin_src elisp :lexical no
  (use-package cape
    :init
    ;; Add `completion-at-point-functions', used by `completion-at-point'.
    ;; NOTE: The order matters!
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-elisp-block)
    (add-to-list 'completion-at-point-functions #'cape-history)
    ;;(add-to-list 'completion-at-point-functions #'cape-keyword)
    ;;(add-to-list 'completion-at-point-functions #'cape-tex)
    ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
    ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
    ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
    (add-to-list 'completion-at-point-functions #'cape-dict))
    ;;(add-to-list 'completion-at-point-functions #'cape-symbol)
    ;;(add-to-list 'completion-at-point-functions #'cape-line)
#+end_src

** Consult

#+begin_src elisp :lexical no
  (use-package consult
    :defer 1
    :general
    (oskah/leader-keys
      "bb" '(consult-buffer :wk "consult buffer")
      "bB" '(consult-buffer-other-window :wk "consult buffer other window")
      "fr" '(consult-recent-file :wk "recent file")
      "sg" '(consult-ripgrep :wk "ripgrep"))
    :config
    (recentf-mode 1))

#+end_src
** Embark

#+begin_src elisp
    (use-package embark
      :general
      (oskah/leader-keys
        "hb" '(embark-bindings :wk "describe bindings")
        "aa" '(embark-act :wk "embark act")
        "ad" '(embark-dwim :wk "default action")))
#+end_src

#+begin_src elisp
  (use-package embark-consult
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

** Marginalia

#+begin_src elisp
  (use-package marginalia
    :after vertico
    ;; :custom
    ;; (vertico-cycle t)
    :config
    (marginalia-mode)
    (savehist-mode))
#+end_src
* Bibilo

#+begin_src elisp
  (defvar oh/bib-files
     '("~/Nextcloud/.org/references.bib"
       "~/Nextcloud/.org/bibliography/zotero.bib"
       "~/Nextcloud/.org/bibliography/uni/IN2000 gang.bib"
       "~/Nextcloud/.org/bibliography/uni/IN2120_gang-midterm.bib"))

  (defvar oh/roam-dir
    "~/Nextcloud/org_notes/roam/bibliography/")
  (defvar oh/library-dir
    "~/Nextcloud/.org/library/")

#+end_src

** Org-cite

#+begin_src elisp
  (use-package oc
    :elpaca nil
    :after org
    :custom
    (org-cite-csl-styles-dir "~/Zotero/styles")
    (org-cite-global-bibliography oh/bib-files)
    (org-cite-export-processors
     '((t csl))))
       ;; (latex biblatex))))
#+end_src

** Citar

#+begin_src elisp
    (use-package citar
      ;:after (org latex)
  :general
      (oskah/leader-keys '(org-mode-map latex-mode-map)
        "mrc" '(citar-insert-citation :which-key "insert citation")
        "mre" '(citar-export-local-bib-file :which-key "export local bib file")
        "mro" '(citar-open :wk "open resource"))
      :custom
      (citar-bibliography oh/bib-files)
      (citar-notes-paths (list oh/roam-dir))          ; List of directories for reference nodes
      (citar-open-note-function 'orb-citar-edit-note) ; Open notes in `org-roam'
      (citar-at-point-function 'embark-act))          ; Use `embark'
#+end_src

#+begin_src elisp :lexical no
  (use-package citar-embark
    :after citar embark
    :no-require
    :config (citar-embark-mode))
#+end_src

#+begin_src elisp
  (use-package citar-org
    :elpaca nil
    :after (oc citar)
    :custom
    (org-cite-insert-processor 'citar)
    (org-cite-follow-processor 'citar)
    (org-cite-activate-processor 'citar))
#+end_src

** Citation rendering

#+begin_src elisp :lexical no
  (use-package oc-csl-activate
    :after org
    :hook
    (org-mode . (lambda () (cursor-sensor-mode 1)))
    ;; This makes the citations render after every command, which might make the
    ;; editor slow.
    (org-mode . (lambda () (add-hook 'post-command-hook
                                     (lambda ()
                                       (org-cite-csl-activate-render-all))
                                     90)))
    :elpaca (oc-csl-activate
             :type git
             :host github
             :repo "andras-simonyi/org-cite-csl-activate")
    :custom
    (org-cite-csl-activate-use-citar-cache t)
    :config
    (setq org-cite-activate-processor 'csl-activate))
#+end_src

** Citar-org-roam

#+begin_src elisp :lexical no
  (use-package citar-org-roam
    :after (citar org-roam)
    :config (citar-org-roam-mode)
    :custom
    (citar-org-roam-capture-template-key "n")
    :config
    (add-to-list 'org-roam-capture-templates
       '("n" "literature note" plain
               "%?"
               :target
               (file+head
                "%(expand-file-name (or citar-org-roam-subdir \"\") org-roam-directory)/${citar-citekey}.org"
                "#+title: ${citar-citekey} (${citar-date}). ${note-title}.\n#+created: %U\n#+last_modified: %U\n\n")
               :unnarrowed t)))
#+end_src

* Misc
** Orderless

#+begin_src elisp :lexical no
  (use-package orderless
    :after vertico
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

** Dired

#+begin_src elisp
  (use-package dired
    :elpaca nil
    :commands (dired dired-jump)
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    :general
    (oskah/leader-keys
      "fd" '(dired-jump :which-key "dired jump")
      "fD" '(dired-jump-other-window :which-key "dired"))
    :general
    ('normal 'dired-mode-map
      "h" 'dired-up-directory
      "l" 'dired-find-file))
#+end_src

** Eshell-fish

#+begin_src elisp
  (use-package fish-completion
    ;:hook (eshell-mode . fish-completion-mode)
    :if (executable-find "fish")
    :after eshell
    :config
    (global-fish-completion-mode))
#+end_src
** Vterm

#+begin_src elisp :lexical no
  (use-package vterm
    :ensure-system-package
    cmake
    (hostname . inetutils) ; This is needed for direcoty tracking
                           ; to work
    :general
    (oskah/leader-keys
      "ov" 'vterm
      "oV" 'vterm-other-window))
#+end_src

This is the configuration that should be put in ~~/.config/fish/config.fish~. This is describe in the [[https://github.com/akermu/emacs-libvterm/tree/94e2b0b2b4a750e7907dacd5b4c0584900846dd1#shell-side-configuration][GitHub]].

#+begin_src fish
  function vterm_prompt_end;
      vterm_printf '51;A'(whoami)'@'(hostname)':'(pwd)
  end
  functions --copy fish_prompt vterm_old_fish_prompt
  function fish_prompt --description 'Write out the prompt; do not replace this. Instead, put this at end of your file.'
      # Remove the trailing newline from the original prompt. This is done
      # using the string builtin from fish, but to make sure any escape codes
      # are correctly interpreted, use %b for printf.
      printf "%b" (string join "\n" (vterm_old_fish_prompt))
      vterm_prompt_end
  end
#+end_src

** PDF

#+begin_src elisp
  (use-package pdf-tools
    :defer t
    :hook (pdf-view-mode-hook . evil-normal-state)
    :mode ("\\.pdf\\'" . pdf-tools)
    :config
    (pdf-tools-install))
#+end_src
** Mail

#+begin_src elisp
  ;; (set-email-account! "proton"
  ;;   '((mu4e-sent-folder       . "/proton/Sent")
  ;;     (mu4e-drafts-folder     . "/proton/Drafts")
  ;;     (mu4e-trash-folder      . "/proton/Trash")
  ;;     (mu4e-refile-folder     . "/proton/All Mail")
  ;;     (smtpmail-smtp-user     . "ohaukeboe@pm.me")
  ;;     (mu4e-compose-signature . "---\nRegards\nOskar"))
  ;;   t)

  ;; (after! mu4e
  ;;   (setq! mu4e-split-view 'vertical))
#+end_src

This requires the =mu= program.

#+begin_src elisp
  (use-package mu4e
    :disabled
    :elpaca nil)
#+end_src

** Undo-tree

#+begin_src elisp
  (use-package undo-tree
    :defer 0
    :disabled
    :diminish
    :config
    (global-undo-tree-mode))
#+end_src

** Vundo

#+begin_src elisp
  (use-package vundo
    :custom
    (vundo-glyph-alist vundo-unicode-symbols)
    :general
    (oskah/leader-keys
      "u" '(vundo :wk "undo tree")))
#+end_src

** SQLite

#+begin_src elisp
  (use-package sqlite3
    :defer t
    :ensure-system-package (sqlite3 . sqlite))
#+end_src
** Spell check
This sets up spell checking using both english and Norwegian dictionaries together. It is also necessary to install =hunspell-en_us= and =hunspell-nb=. Jinx is a much faster alternative to flyspell, and it also supports combining dictionaries.

#+begin_src elisp
  (use-package jinx
    ;:hook (elpaca-after-init . global-jinx-mode)
    :defer 0
    :ensure-system-package (enchant-2 . enchant)
    :custom
    (jinx-languages "en_US nb_NO")
    :general
    (oskah/leader-keys
      "sc" '(jinx-correct :wk "correct previous")
      "ts" '(jinx-mode :wk "toggle spellcheck"))
    :config
    (global-jinx-mode 1)
    (with-eval-after-load 'vertico
      (add-to-list 'vertico-multiform-categories
                   '(jinx grid
                          (:not indexed)
                          (vertico-grid-annotate . 20)))
      (vertico-multiform-mode 1)))
#+end_src
** Ripgrep

#+begin_src elisp :lexical no
  (use-package rg
    :defer t)
#+end_src

** Thesaurus

#+begin_src elisp :lexical no
  (use-package powerthesaurus
    :general
    (oskah/leader-keys
      "s t" '(powerthesaurus-hydra/body :wk "thesaurus")))
#+end_src

** Copilot
#+begin_src elisp
  (use-package copilot
    :defer t
    :elpaca (:host github
             :repo "zerolfx/copilot.el"
             :main nil
             :files ("dist" "*.el"))
    :ensure-system-package (node . nodejs)
    ;; :hook (prog-mode . copilot-mode)
    :general
    (oskah/leader-keys "ta" 'copilot-mode)

    :bind (("C-TAB" . 'copilot-accept-completion-by-word)
           ("C-<tab>" . 'copilot-accept-completion-by-word)
           :map copilot-completion-map
           ("<tab>" . 'copilot-accept-completion)
           ("TAB" . 'copilot-accept-completion)))
#+end_src

I don't want copilot to start on emacs startup, but I also want it to be hooked
to ='prog-mode-hook=, which in case is run on startup. I therefore have a /nice/
lambda expression to load hook it after emacs has loaded. I also added a small
delay to make it easier to analyze when packages are loaded as the startup
message is also run on ='emacs-startup-hook=.

#+begin_src elisp
  (add-hook 'elpaca-after-init-hook
            (lambda ()
              (run-at-time "1 sec" nil
                           (lambda ()
                             (add-hook 'prog-mode-hook 'copilot-mode)
                             (when (derived-mode-p 'prog-mode)
                               (copilot-mode))))))
#+end_src

** ChatGPT

#+begin_src elisp
  (defvar openai-key-memo nil "Memoized OpenAI key")

  (use-package chatgpt-shell
    :commands (chatgpt-shell)
    :custom
    (chatgpt-shell-openai-key
     (lambda ()
       (if openai-key-memo
           openai-key-memo
         (setq openai-key-memo (auth-source-pass-get 'secret "openai-key")))))

    :general
    (oskah/leader-keys
      "og" '("gpt" . chatgpt-shell)))


  (use-package dall-e-shell
    :commands (dall-e-shell)
    :custom
    (chatgpt-shell-openai-key
     (lambda ()
       (if openai-key-memo
           openai-key-memo
         (setq openai-key-memo (auth-source-pass-get 'secret "openai-key")))))
    :general
    (oskah/leader-keys
      "od" '("dall-e" . dall-e-shell)))

  (use-package ob-chatgpt-shell
    :after org
    :config 'ob-chatgpt-shell-setup)
#+end_src

** Editorconfig
#+begin_src elisp
  (use-package editorconfig
    :defer 0
    :config
    (editorconfig-mode 1))
#+end_src
** Helpful
A better help buffer
#+begin_src elisp
  (use-package helpful
    :diminish
    ;; :custom
    ;; (counsel-describe-function-function #'helpful-callable)
    ;; (counsel-describe-variable-function #'helpful-variable)
    :general
    ('normal '(org-mode-map emacs-lisp-mode-map) "K" 'helpful-at-point)

    (oskah/leader-keys
      "hp" 'describe-package
      "ht" 'describe-theme
      "hv" 'describe-variable
      "hf" 'describe-function
      "hk" 'describe-key)

    :bind
    ([remap describe-function] . helpful-function)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-key] . helpful-key)
    ([remap describe-command] . helpful-command))
#+end_src

** Which-key
#+begin_src elisp
  (use-package which-key
    :defer 0
    :custom
    (which-key-idle-delay 0.3)
    :config
    (which-key-mode))
#+end_src
** Wakatime

#+begin_src elisp
  (use-package wakatime-mode
    :defer 5
    :config
    (setq wakatime-disable-on-error t)
    (setq wakatime-cli-path "~/.wakatime/wakatime-cli")
    (global-wakatime-mode))
#+end_src

** Keep folders clean
No littering puts the files that packages places in the emacs directory into
=var/= and =etc/= in the emacs directory.

#+begin_src elisp
  (use-package no-littering
    :demand t)
    ;; :custom
    ;; (auto-save-file-name-transforms
    ;;  `((".*" ,(no-littering-expand-var-file-name "auto-save/") t))))
#+end_src
