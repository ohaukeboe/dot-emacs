#+title: My Emacs configuration
:HEADER:
#+startup: fold hideblocks
#+property: header-args:elisp :tangle configuration.el
:END:

Welcome to my Emacs config. It is written in [[https://orgmode.org/][org mode]] as it sort of helps a bit for keeping it tidy. I use [[https://github.com/emacs-evil/evil][evil mode]] as I really like vim binds, and I am also inspired by [[https://github.com/doomemacs/doomemacs][Doom emacs]] which I used before I started on this config. The programs that this config depends on are all listed in my nix/home-manager [[https://codeberg.org/ohaukeboe/home-manager][config]].

I would not recommend using this config /as-is/ since I probably have a lot of stuff that you don't need (and probably that I don't need either).

[[https://web.archive.org/web/20210921233717/https://ambrevar.xyz/emacs-eshell/index.html][This]] and [[https://web.archive.org/web/20211017064048/https://ambrevar.xyz/emacs-eshell-versus-shell/index.html][this]] are some nice articles about =shell= and =eshell= that can be worth reading.

#+begin_src elisp
  ;; (add-to-list 'custom-theme-load-path "~/projects/emacs-theme/")
  ;; (load-theme 'my-theme t)
#+end_src

* Startup performance

#+begin_src elisp
  (setq gc-cons-threshold 100000000)

  ;; (add-hook 'after-init-hook
  ;;             (lambda ()
  ;;               (run-at-time "5 sec" nil
  ;;                             (lambda ()
  ;;                               (setq gc-cons-threshold 1000000)))))

  ;; (debug-on-entry 'require)
#+end_src

* Elpaca
Install elpaca

 #+begin_src elisp
   (defvar elpaca-installer-version 0.6)
   (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
   (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
   (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
   (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                                 :ref nil
                                 :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                                 :build (:not elpaca--activate-package)))
   (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
          (build (expand-file-name "elpaca/" elpaca-builds-directory))
          (order (cdr elpaca-order))
          (default-directory repo))
     (add-to-list 'load-path (if (file-exists-p build) build repo))
     (unless (file-exists-p repo)
       (make-directory repo t)
       (when (< emacs-major-version 28) (require 'subr-x))
       (condition-case-unless-debug err
           (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                    ((zerop (call-process "git" nil buffer t "clone"
                                          (plist-get order :repo) repo)))
                    ((zerop (call-process "git" nil buffer t "checkout"
                                          (or (plist-get order :ref) "--"))))
                    (emacs (concat invocation-directory invocation-name))
                    ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                          "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                    ((require 'elpaca))
                    ((elpaca-generate-autoloads "elpaca" repo)))
               (progn (message "%s" (buffer-string)) (kill-buffer buffer))
             (error "%s" (with-current-buffer buffer (buffer-string))))
         ((error) (warn "%s" err) (delete-directory repo 'recursive))))
     (unless (require 'elpaca-autoloads nil t)
       (require 'elpaca)
       (elpaca-generate-autoloads "elpaca" repo)
       (load "./elpaca-autoloads")))
   (add-hook 'after-init-hook #'elpaca-process-queues)
   (elpaca `(,@elpaca-order))
 #+end_src

Enable elpaca use-package support

 #+begin_src elisp
   ;; Install use-package support
   (elpaca elpaca-use-package
     ;; Enable :elpaca use-package keyword.
     (elpaca-use-package-mode)
     ;; Assume :elpaca t unless otherwise specified.
     (setq elpaca-use-package-by-default t)
     (setq package-user-dir (expand-file-name "builds" elpaca-directory)))
     ;; (setq use-package-always-defer t))

   ;; Block until current queue processed.
   (elpaca-wait)

   ;;(require 'bind-key)
 #+end_src

** Benchmark

#+begin_src elisp
  (use-package benchmark-init
    :demand t
    :hook emacs-startup-hook
    :init
    ;; To disable collection of benchmark data after init is done.
    ;; (add-hook 'after-init-hook 'benchmark-init/deactivate)
    (add-hook 'after-init-hook
              (lambda ()
                (run-at-time 5 nil 'benchmark-init/deactivate)))
    :config
    (message "Started benchmark-init"))
#+end_src

** Diminish

#+begin_src elisp
  (use-package diminish)

#+end_src

* Keybinds
** General
Yes, the package is called general. It's a keybinding framework.

#+begin_src elisp
  (use-package general
    :diminish
    :commands general-def
    :init
    (general-create-definer oskah/leader-keys
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC"
      :global-prefix "C-SPC"))

  ;; Wait until this is setup before loading the rest of the config.
  ;; This is needed for the =:general= flag to work.
  (elpaca-wait)
#+end_src

** Evil
*** Evil mode
#+begin_src elisp
  (use-package evil
    :diminish
    ;; :defer 0
    :custom
    (evil-lookup-func 'oskah/evil-lookup-func)
    (evil-want-keybinding nil)
    (evil-want-C-u-scroll t)
    (evil-want-C-i-jump t)
    (evil-undo-system 'undo-fu)
    (evil-shift-width 4)

    :general
    ('(normal visual)
     "gr" 'eval-region
     "gd" 'xref-find-definitions
     "gD" 'xref-find-definitions-other-window)
    ('insert "S-<return>" 'newline-and-indent)  ; Make S-RET always do newline-and-indent
    (oskah/leader-keys
      "we" '(evil-window-map :wk "evil window map")
      "[" '(evil-prev-buffer :wk "previous buffer")
      "]" '(evil-next-buffer :wk "next buffer"))

    :init
    (evil-mode 1)

    :config
    (evil-global-set-key 'normal (kbd "C-g") 'evil-force-normal-state)

    (evil-global-set-key 'normal (kbd "j") 'evil-next-visual-line)
    (evil-global-set-key 'normal (kbd "k") 'evil-previous-visual-line)

    (dolist (mode '(custom-mode
                    eshell-mode
                    git-rebase-mode
                    artist-mode
                    term-mode))
            (add-to-list 'evil-emacs-state-modes mode))

    (add-to-list 'evil-intercept-maps '(eww-mode-map)))
#+end_src

#+begin_src elisp
  (defvar-local oskah/evil-lookup-procs '(lsp-describe-thing-at-point))

  (defun oskah/add-to-lookup-procs (proc)
    (add-to-list 'oskah/evil-lookup-procs proc))

  (defun oskah/evil-lookup-func ()
    (interactive)
    (let ((success nil))
      (dolist (proc oskah/evil-lookup-procs)
        (unless success
          (setq success
                (condition-case nil
                    (call-interactively proc)
                  (error nil)))))))

#+end_src

#+begin_src elisp
  (use-package evil-collection
    :after evil
    :demand
    :config
    (evil-collection-init))
#+end_src

*** Commenter

#+begin_src elisp
  (use-package evil-nerd-commenter
    :after evil
    :demand
    :general
    ('(normal visual)
     "gc" 'evilnc-comment-or-uncomment-lines
     "M-;" 'comment-indent)
    :config
    (evilnc-default-hotkeys))
#+end_src
*** Matchit
Enables pressing =%= to jump between matching pairs. Despite the name, It does not depend on evil mode.

#+begin_src elisp
  (use-package evil-matchit
    :after evil
    :config
    (global-evil-matchit-mode 1))
#+end_src
*** Fold
Improve text folding

#+begin_src elisp
  (use-package vimish-fold
    :after evil)

  (use-package evil-vimish-fold
    :after vimish-fold
    :general
    ('(vimish-fold-folded-keymap vimish-fold-unfolded-keymap)
     "TAB" 'vimish-fold-toggle)
    :init
    (setq evil-vimish-fold-mode-lighter " â®’")
    (setq evil-vimish-fold-target-modes '(prog-mode conf-mode text-mode))
    :config
    (global-evil-vimish-fold-mode))
#+end_src

Enable =hs-minor-mode= for easily fold based on indentation levels

#+begin_src elisp
  (use-package hs-minor-mode
    :elpaca nil
    :hook prog-mode
    :general
    ('normal
     "TAB" 'hs-toggle-hiding))
#+end_src

*** Surround

#+begin_src elisp
  (use-package evil-surround
    :after evil
    :config
    (global-evil-surround-mode 1))
#+end_src

*** Numbers

#+begin_src elisp
  (use-package evil-numbers
    :general
    ('(normal visual)
      "g=" 'evil-numbers/inc-at-pt-incremental
      "g-" 'evil-numbers/dec-at-pt
      "g+" 'evil-numbers/inc-at-pt))
#+end_src

*** Goggles
Add visual hints to ceirtain evil opperations such as yank.

#+begin_src elisp
  (use-package evil-goggles
    :after evil
    :custom
    (evil-goggles-enable-delete nil)
    :config
    (evil-goggles-mode))
#+end_src

*** Exchange

#+begin_src elisp
  (use-package evil-exchange
    :after evil
    :config
    (evil-exchange-install))
#+end_src
*** Args

#+begin_src elisp
  (use-package evil-args
    :after evil
    :config
    (define-key evil-inner-text-objects-map "a" 'evil-inner-arg)
    (define-key evil-outer-text-objects-map "a" 'evil-outer-arg)
    (define-key evil-normal-state-map "L" 'evil-forward-arg)
    (define-key evil-normal-state-map "H" 'evil-backward-arg)
    (define-key evil-motion-state-map "L" 'evil-forward-arg)
    (define-key evil-motion-state-map "H" 'evil-backward-arg))
#+end_src
*** Lion

#+begin_src elisp
  (use-package evil-lion
    :after evil
    :general
    ('(normal visual) "g l" 'evil-lion-left
                      "g L" 'evil-lion-right)
    :config
    (evil-lion-mode))
#+end_src

** Hydra
#+begin_src elisp
  (use-package hydra
    :defer 0
    :commands (defhydra))
#+end_src

** Top level keybindings
These are the top level keybindings, which are only used to group other
keybindings in a logical way, and to describe them in the which-key popup.

#+begin_src elisp
  (oskah/leader-keys "m" '(:ignore t :wk "localleader")
                     "w" '(:ignore t :wk "window")
                     "t" '(:ignore t :wk "toggle")
                     "f" '(:ignore t :wk "file")
                     "c" '(:ignore t :wk "code")
                     "g" '(:ignore t :wk "git")
                     "a" '(:ignore t :wk "embark")
                     "s" '(:ignore t :wk "spell")
                     "b" '(:ignore t :wk "buffer")
                     "h" '(:ignore t :wk "help")
                     "n" '(:ignore t :wk "notes")
                     ;; "p" '(:ignore t :wk "project")
                     "o" '(:ignore t :wk "open")
                     "q" '(:ignore t :wk "quit"))
#+end_src

And these are some general keybindings I like

#+begin_src elisp
  (oskah/leader-keys
    ":" '("M-x" . execute-extended-command)
    ";" '("eval-expression" . pp-eval-expression)
    "." '("find file" . find-file)

    "of" '(make-frame :which-key "new frame")
    "hc" '("describe char" . describe-char)
    "hB" '("describe keybindings" . describe-bindings)
    "hi" '("show manual" . info-display-manual)
    "hI" '("show manual" . consult-info)
    "hm" '("describe mode" . describe-mode)
    "hr" '("rebuild config" . (lambda ()
                                (interactive)
                                (org-babel-tangle-file
                                 (locate-user-emacs-file "configuration.org"))))

    "bk" '(kill-current-buffer :which-key "kill current buffer")
    "br" '(revert-buffer :which-key "revert buffer")

    ;; "wv" '(evil-window-vsplit :which-key "split vertically")
    ;; "wh" '(evil-window-split :which-key "split horizontally")

    "oe" '("open terminal" . eshell)

    "fc" '("open config" . (lambda ()
                             (interactive)
                             (find-file (locate-user-emacs-file "configuration.org"))))
    "tv" '(visual-line-mode :wk "word wrap")
    "X" '(scratch-buffer :wk "scratch buffer"))

  (general-def 'normal
    "C-=" 'text-scale-increase
    "C--" 'text-scale-decrease)
#+end_src

** Window management

#+begin_src elisp
  (with-eval-after-load 'evil
    (winner-mode 1)
    (defhydra oh/window-resize (:timeout 2)
      "resize window"
      ("h" evil-window-decrease-width "decrease width")
      ("j" evil-window-decrease-height "decrease height")
      ("k" evil-window-increase-height "increase height")
      ("l" evil-window-increase-width "increase width")
      ("H" (evil-window-decrease-width 10) "decrease width")
      ("J" (evil-window-decrease-height 10) "decrease height")
      ("K" (evil-window-increase-height 10) "increase height")
      ("L" (evil-window-increase-width 10) "increase width")
      ("q" nil "quit"))

    (oskah/leader-keys
      "wn" '(evil-window-new :wk "new window")
      "ws" '(evil-window-split :wk "horizontal split")
      "wv" '(evil-window-vsplit :wk "vertical split")
      "wd" '(evil-window-delete :wk "delete window")
      "wo" '(delete-other-windows :wk "delete other windows")
      "w=" '(balance-windows :wk "balance windows")
      "wx" '(evil-window-exchange :wk "exchange windows")

      "wh" '(evil-window-left :wk "move left")
      "wj" '(evil-window-down :wk "move down")
      "wk" '(evil-window-up :wk "move up")
      "wl" '(evil-window-right :wk "move right")
      "wH" '(evil-window-move-far-left :wk "move to far left")
      "wJ" '(evil-window-move-very-bottom :wk "move to very bottom")
      "wK" '(evil-window-move-very-top :wk "move to very top")
      "wL" '(evil-window-move-far-right :wk "move to far right")

      "wr" '(evil-window-rotate-downwards :wk "rotate downwards")
      "wR" '(evil-window-rotate-upwards :wk "rotate upwards")

      "wz" '(oh/window-resize/body :wk "resize window")

      "wu" '(winner-undo :wk "undo window change")
      "wU" '(winner-redo :wk "redo window change")

      "qf" '(delete-frame :wk "delete frame")
      "qF" '(delete-other-frames :wk "delete other frames")
      "qe" '(kill-emacs :wk "kill emacs")
      "qr" '(restart-emacs :wk "restart emacs")))

#+end_src

* Look and feel
** General

#+begin_src elisp
  (add-to-list 'default-frame-alist
               '(internal-border-width . 10))

  ;; add spacing between windows
  (setq window-divider-default-right-width 10)
  (setq window-divider-default-places 'right-only)
  (window-divider-mode)
#+end_src

** Fonts

#+begin_src elisp
  (custom-theme-set-faces
   'user
   '(default ((t (:family "Roboto Mono" :height 130))))
   '(fixed-pitch ((t (:family "Roboto Mono" :height 0.9))))
   '(variable-pitch ((t (:family "Roboto Serif" :height 1.3))))
   '(italic ((t (:slant italic :inherit nil)))))

  ;; (with-eval-after-load 'nano-theme
  ;;   (set-face-attribute 'nano-strong nil
  ;;                       :weight 'semi-bold))
#+end_src

** NANO

I find that [[https://github.com/rougier/nano-modeline][nano modeline]] looks very good. I have also installed the [[https://github.com/rougier/nano-theme][nano theme]] and then simply changed all the colors in order to have a properly dark theme. When finding these colors I found the [[https://www.colorhexa.com/][colorhexa]] website to be a great resource.

#+begin_src elisp
  (use-package nano-theme
    :demand
    :custom
    (nano-dark-foreground "#e8d6c6")
    (nano-dark-background "#171717")
    (nano-dark-highlight  "#2b2b2b")
    (nano-dark-critical   "#EBCB8B")
    (nano-dark-salient    "#aac5dd")
    (nano-dark-strong     "#e8dfc6")
    (nano-dark-popout     "#d79ca3")
    (nano-dark-subtle     "#212121")
    (nano-dark-faded      "#c69a72")

    ;; (nano-light-background "#fafafa")
    :init
    (load-theme 'nano-dark t)
    ;; :commands (oh/cycle-themes)
    ;; :general
    ;; (oskah/leader-keys
    ;;   "tt" (list (oh/cycle-themes) :wk "cycle themes"))
    :config

    (defun oh/set-org-faces ()
      "Make org source blocks have the same background as the default face."
      (with-eval-after-load 'org-faces
       (set-face-attribute 'org-block nil :background (face-background 'default))))

    (oh/set-org-faces))



    ;; (defun oh/cycle-themes ()
    ;;   "Returns a function that lets you cycle your themes."
    ;;   (let ((themes '(nano-dark nano-light)))
    ;;     (lambda ()
    ;;       (interactive)
    ;;       ;; Rotates the theme cycle and changes the current theme.
    ;;       (let ((rotated (nconc (cdr themes) (list (car themes)))))
    ;;         (load-theme (car (setq themes rotated)) t))
    ;;       ;; (oh/set-org-faces)
    ;;       (message (concat "Switched to " (symbol-name (car themes))))))))
#+end_src

#+begin_src elisp
  (use-package nano-modeline
    :demand
    :init
    (setq-default mode-line-format nil)  ; disable default mode-line
    :hook
    (prog-mode            . nano-modeline-prog-mode)
    (text-mode            . nano-modeline-text-mode)
    (org-mode             . nano-modeline-org-mode)
    (pdf-view-mode        . nano-modeline-pdf-mode)
    (mu4e-headers-mode    . nano-modeline-mu4e-headers-mode)
    (mu4e-view-mode       . nano-modeline-mu4e-message-mode)
    (elfeed-show-mode     . nano-modeline-elfeed-entry-mode)
    (elfeed-search-mode   . nano-modeline-elfeed-search-mode)
    (term-mode            . nano-modeline-term-mode)
    (xwidget-webkit-mode  . nano-modeline-xwidget-mode)
    (messages-buffer-mode . nano-modeline-message-mode)
    (org-capture-mode     . nano-modeline-org-capture-mode)
    (org-agenda-mode      . nano-modeline-org-agenda-mode))
#+end_src

#+begin_src elisp
  (use-package nano-agenda
    :disabled       ; It's probably gonna be useful when I start using org-agenda
    :commands (nano-agenda))
#+end_src

** svg-lib

#+begin_src elisp
  (use-package svg-lib)
  (use-package svg-tag-mode
    :hook (org-mode . svg-tag-mode)
    :disabled
    :custom
    (svg-tag-tags
     '(
       ;; Org tags
       ;; ("\\(:[A-Z]+:\\)" . ((lambda (tag)
       ;;                        (svg-tag-make tag :beg 1 :end -1))))
       ;; (":TODO:" . ((lambda (tag) (svg-tag-make "TODO" :face 'org-todo :inverse t :margin 0))))
       ;; (":DONE:" . ((lambda (tag) (svg-tag-make "DONE" :face 'org-done :margin 0))))

       ;; ("\\(:#[A-Za-z0-9]+\\)" . ((lambda (tag)
       ;;                                (svg-tag-make tag :beg 2))))
       ;; ("\\(:#[A-Za-z0-9]+:\\)$" . ((lambda (tag)
       ;;                                (svg-tag-make tag :beg 2 :end -1))))

       ;; Progress
       ("\\(\\[[0-9]\\{1,3\\}%\\]\\)" . ((lambda (tag)
                                           (svg-progress-percent (substring tag 1 -2)))))
       ("\\(\\[[0-9]+/[0-9]+\\]\\)" . ((lambda (tag)
                                         (svg-progress-count (substring tag 1 -1)))))
       ;; TODO / DONE
       (" \\(TODO\\)" . ((lambda (tag) (svg-tag-make "TODO" :face 'org-todo :inverse t :margin 0))))
       (" \\(DONE\\)" . ((lambda (tag) (svg-tag-make "DONE" :face 'org-done :margin 0))))))

    :config
    (defun svg-progress-percent (value)
     (svg-image (svg-lib-concat
                 (svg-lib-progress-bar (/ (string-to-number value) 100.0)
                                   nil :margin 0 :stroke 2 :radius 3 :padding 2 :width 11)
                 (svg-lib-tag (concat value "%")
                              nil :stroke 0 :margin 0)) :ascent 'center))

    (defun svg-progress-count (value)
      (let* ((seq (mapcar #'string-to-number (split-string value "/")))
             (count (float (car seq)))
             (total (float (cadr seq))))
       (svg-image (svg-lib-concat
                   (svg-lib-progress-bar (/ count total) nil
                                         :margin 0 :stroke 2 :radius 3 :padding 2 :width 11)
                   (svg-lib-tag value nil
                                :stroke 0 :margin 0)) :ascent 'center))))
#+end_src

** All the icons
It is necessary to run ~M-x all-the-icons-install-fonts~ to set up icon fonts.

#+begin_src elisp
  (use-package all-the-icons
    :disabled
    :defer t
    :if (display-graphic-p))
#+end_src

** Nerd icons

#+begin_src elisp
  (use-package nerd-icons
    :after dashboard
    :custom
    ;; The Nerd Font you want to use in GUI
    ;; "Symbols Nerd Font Mono" is the default and is recommended
    ;; but you can use any other Nerd Font if you want
    (nerd-icons-font-family "Symbols Nerd Font Mono"))

#+end_src

** Dashboard
A prettier startup screen

#+begin_src elisp
  (use-package dashboard
    :config
    (add-hook 'elpaca-after-init-hook #'dashboard-insert-startupify-lists)
    (add-hook 'elpaca-after-init-hook #'dashboard-initialize)
    (dashboard-setup-startup-hook)

    (add-to-list 'dashboard-items '(projects . 5))

    :custom
    (dashboard-projejects-backend 'projectile)
    (dashboard-set-heading-icons t)
    (dashboard-set-file-icons t)
    (initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
    (dashboard-display-icons-p t) ;; display icons on both GUI and terminal
    (dashboard-icon-type 'all-the-icons) ;; use `nerd-icons' package
    (dashboard-week-agenda nil)          ; nil for only current day
                                         ; and t for the whole week
    (dashboard-center-content t)
    ;; (dashboard-startup-banner 2)
    (dashboard-items '((recents  . 5)
                       (bookmarks . 5)
                       (projects . 5)
                       (agenda . 5)
                       (registers . 5))))
#+end_src

** Olivetti

#+begin_src elisp
  (use-package olivetti
    :diminish
    :hook (org-mode . olivetti-mode)
    :commands olivetti-mode
    :custom
    (olivetti-body-width 90)
    :general
    (oskah/leader-keys "to" 'olivetti-mode))
#+end_src

* Sane defaults
These are the defaults that I deem sane, and that should set before anything else.

#+begin_src elisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)   ;; esc quits the current action

  (setq auto-revert-interval 1              ; Refresh buffers fast
        display-line-numbers-type 'relative ; Show relative line numbers
        use-dialog-box nil                  ; No dialog boxes
        default-input-method "TeX"          ; Use TeX when toggling input method
        echo-keystrokes 0.1                 ; Show keystrokes asap
        frame-inhibit-implied-resize 1      ; Don't resize frame implicitly
        inhibit-startup-screen t            ; No splash screen please
        initial-scratch-message nil         ; Clean scratch buffer
        recentf-max-saved-items 100         ; Show more recent files
        ring-bell-function 'ignore          ; Quiet
        scroll-margin 1                     ; Space between cursor and top/bottom
        sentence-end-double-space nil       ; No double space
        save-silently t                     ; Don't show message when saving
        backup-directory-alist `(("." . ,(concat user-emacs-directory "var/backups"))))

  (dolist (mode '(tool-bar-mode
                  scroll-bar-mode
                  menu-bar-mode))
    (funcall mode 0))

  (dolist (mode '(global-auto-revert-mode
                  electric-pair-mode               ; Auto close ({[...
                  global-display-line-numbers-mode))
    (funcall mode t))

  (dolist (mode '(org-mode-hook
                  Info-mode-hook
                  special-mode-hook
                  image-mode-hook
                  pdf-view-mode-hook
                  term-mode-hook
                  vterm-mode-hook
                  shell-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (fset 'yes-or-no-p 'y-or-n-p)
  (set-fringe-mode 0)

  (add-hook 'before-save-hook
            'delete-trailing-whitespace)
#+end_src

Some variables are buffer-local, and should therefore be set using ~setq-default~ in order to set them globally.

#+begin_src elisp
  (setq-default indent-tabs-mode nil              ; Use spaces instead of tabs
                tab-width 4                       ; Smaller tabs
                fill-column 80                    ; Maximum line width
                truncate-lines t                  ; Don't fold lines
                frame-resize-pixelwise t          ; Fine-grained frame resize
                auto-fill-function 'do-auto-fill) ; Auto-fill-mode everywhere
#+end_src

Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets. It is optional.

#+begin_src elisp
(setq user-full-name "Oskar HaukebÃ¸e"
      user-mail-address "ohaukeboe@pm.me")
#+end_src

* Project management
** Magit

#+begin_src elisp
  (use-package magit
    :custom
    (magit-display-buffer-function
     #'magit-display-buffer-same-window-except-diff-v1)

    :general
    (oskah/leader-keys "gg" 'magit-status)
    ('magit-mode-map
     "w" 'magit-worktree
     "h" 'magit-patch))
#+end_src

Magit-todos for integrating TODO keywords with magit's overview screen

#+begin_src elisp
  (use-package magit-todos
      :after magit
      :config
      (magit-todos-mode)
      :init
      (global-hl-todo-mode))
#+end_src

** Forge

#+begin_src elisp
  (use-package forge
    :after magit
    :diminish
    :config
    (setq auth-sources '("~/.authinfo")))
#+end_src

** Projectile

#+begin_src elisp
  (use-package projectile
    :after vertico
    :diminish
    :defer 1
    :commands (projectile-mode projectile-command-map)
    :general
    (oskah/leader-keys
      "p" 'projectile-command-map
      "SPC" 'projectile-find-file)
    :config
    (projectile-mode 1)
    (when (file-directory-p "~/projects")
      (setq projectile-project-search-path '("~/projects"))
      (projectile-discover-projects-in-search-path)))
#+end_src
*** Projectile counsel
#+begin_src elisp
  (use-package counsel-projectile
    :after (counsel projectile)
    :diminish
    :disabled
    :config
    (counsel-projectile-mode))
#+end_src
* Programming
** Rainbow delimiters

#+begin_src elisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Tree-sitter
Automatically install and use tree-sitter major modes in Emacs 29+. If the tree-sitter version canâ€™t be used, fall back to the original major mode.

#+begin_src elisp :lexical no
  (use-package treesit-auto
    :if (>= emacs-major-version 29)
    :defer 0
    :custom
    (treesit-auto-install t)
    :config
    (global-treesit-auto-mode))
#+end_src

** Rainbow mode
Visualize the colors of color codes

#+begin_src elisp
  (use-package rainbow-mode
    :hook prog-mode)
#+end_src

** LSP-mode

#+begin_src elisp
  (use-package lsp-mode
    :commands
    (lsp-deferred lsp)

    :hook
    prog-mode
    markdown-mode
    latex-mode
    (lsp-completion-mode . my/lsp-mode-setup-completion)

    :general
    (oskah/leader-keys
      "cr" '(lsp-rename :wk "rename")
      "cn" '(consult-imenu :wk "navigate symbols")
      "cm" '(consult-imenu-multi :wk "navigate symbols (multi)")
      "cd" '(consult-lsp-diagnostics :wk "diagnostics")
      "ca" '(lsp-execute-code-action :wk "code action")
      "cf" '(lsp-format-buffer :wk "format buffer")
      "ch" '(lsp-describe-thing-at-point :wk "describe thing"))
    ('normal
      "gr" '(lsp-find-references :wk "find references"))

    :custom
    (lsp-warn-no-matched-clients nil)
    (lsp-completion-provider :none) ;; I use Corfu instead!
    (lsp-keymap-prefix nil)
    (lsp-headerline-breadcrumb-enable nil)
    (eldoc-display-functions '(eldoc-display-in-buffer))

    (lsp-inlay-hint-enable t)
    :init
    ;; Performance
    (setq read-process-output-max (* 1024 1024)) ;; 1mb

    ;; Completion
    (defun my/lsp-mode-setup-completion ()
      (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
            '(orderless))) ;; Configure orderless

    :config
    (progn
      (lsp-register-client
        (make-lsp-client :new-connection (lsp-tramp-connection "clangd")
                         :major-modes '(c-mode c++-mode c-ts-mode c++-ts-mode)
                         :remote? t
                         :server-id 'clangd-remote))
      (lsp-register-client
        (make-lsp-client :new-connection (lsp-tramp-connection "pylsp")
                         :major-modes '(python-mode python-ts-mode)
                         :remote? t
                         :server-id 'pylsp-remote))))

  (use-package lsp-ui
    :after lsp-mode

    :custom
    (lsp-ui-doc-enable nil)
    (lsp-ui-doc-show-with-cursor nil)
    (lsp-ui-doc-show-with-mouse nil)

    :hook
    (lsp-mode . lsp-ui-mode))

    ;; :general)
    ;; (oskah/leader-keys
    ;;   "cdf" '(lsp-ui-doc-focus-frame :wk "focus frame")
    ;;   "cdd" '(lsp-ui-doc-show :wk "show documentation")
    ;;   "cdc" '(lsp-ui-doc-hide :wk "hide documentation")))

    ;; ('normal 'lsp-ui-mode-map
    ;;   "K" 'lsp-ui-doc-show :wk "show documentation"))


  (use-package consult-lsp
    :after lsp-mode)
#+end_src

** DAP-mode

#+begin_src elisp
  (use-package dap-mode
    :after lsp-mode
    :config
    (dap-auto-configure-mode))
#+end_src

** Eglot

#+begin_src elisp :lexical no
  (use-package eglot
    :disabled
    :elpaca nil
    :hook (eglot--managed-mode . (lambda ()
                                   (general-def 'normal eglot-mode-map "K" nil)))
    (special-mode . (lambda () (visual-line-mode 1)))
    :custom
    (eldoc-display-functions '(eldoc-display-in-buffer))
    :general
    (oskah/leader-keys
      "ch" '(eldoc :wk "help at point")
      "cr" '(eglot-rename :wk "rename")
      ;; "cd" 'eglot-find-declaration :wk "find declaration"
      ;; "ci" 'eglot-find-references :wk "find references"
      "cf" '(eglot-format :wk "format region")
      "ca" '(eglot-code-actions :wk "code actions")
      "cD" '(flymake-show-buffer-diagnostics :wk "show diagnostics")
      "cn" '(consult-imenu :wk "navigate symbols")))
      ;; "ce" '(consult-flymake :wk "show errors")))
    ;; ('(normal) 'eglot-mode-map
    ;;  "K" nil))
    ;; :config
    ;; (general-def 'normal eglot-mode-map "K" nil))

#+end_src

** Flycheck

#+begin_src elisp
  (use-package flycheck
    :after prog-mode
    :custom
    (flycheck-emacs-lisp-initialize-packages t)
    :config
    (global-flycheck-mode)

    ;; Disable checkdoc for elisp. This is useful for org-mode
    ;; source blocks. But will also disable checkdoc for elisp
    ;; files.
    (defun my-org-mode-setup ()
      (setq-local flycheck-disabled-checkers '(emacs-lisp-checkdoc)))
    (add-hook 'emacs-lisp-mode-hook #'my-org-mode-setup))
#+end_src

Show error messages displayed on the sideline

#+begin_src elisp
  (use-package sideline
    :disabled                             ; should be enabled when using eglot
    :hook (flycheck-mode . sideline-mode)
    :custom
    (sideline-delay 0.0)
    (sideline-flycheck-max-lines 5)
    (flycheck-display-errors-delay 0.01)
    :init
    (setq sideline-backends-right '(sideline-flycheck)))

  (use-package sideline-flycheck
    :disabled
    :after sideline
    :hook (flycheck-mode . sideline-flycheck-setup))

  ;; (use-package sideline-flymake
  ;;   :after sideline)
#+end_src

Make flycheck and eglot work better together

#+begin_src elisp
  (use-package flycheck-eglot
    :disabled
    :after (flycheck eglot)
    :config
    (global-flycheck-eglot-mode 1))
#+end_src

** Make

#+begin_src elisp
  (use-package makefile-executor
    :hook
    ('makefile-mode-hook 'makefile-executor-mode)
    :after
    (projectile-commander))
#+end_src

** Languages
*** Nix

#+begin_src elisp
  (use-package nix-mode
    :mode "\\.nix\\'")

  (use-package company-nixos-options
    :after nix
    :hook
    (nix-mode .
      (lambda ()
        (add-to-list 'completion-at-point-functions
                     (cape-company-to-capf 'company-nixos-options)))))

#+end_src

*** Markdown

#+begin_src elisp :lexical no
  (use-package markdown-mode
    :elpaca nil
    :defer t
    :hook
    (markdown-mode . (lambda () (auto-fill-mode 0)))
    (markdown-mode . (lambda () (visual-line-mode 1))))
#+end_src

*** Racket
This requires some additional Racket packages to be installed. Once you have Racket installed you can simply run
#+begin_src sh
  raco pkg install --auto drracket sicp
#+end_src

#+begin_src elisp
  (use-package racket-mode
    :hook (racket-mode . parinfer-rust-mode)
    :mode "\\.rkt\\'"
          "\\.scm\\'"
    :hook
    ((racket-mode) .
     (lambda ()
       (oskah/add-to-lookup-procs 'helpful-at-point))))

  (use-package ob-racket
    :after org
    :elpaca (ob-racket :type git :host github :repo "DEADB17/ob-racket")
    :init
    (with-eval-after-load 'org
      (add-to-list 'org-babel-load-languages '(racket . t))))

#+end_src

*** Geiser

#+begin_src elisp
  (use-package geiser-guile
    :hook (scheme-mode . parinfer-rust-mode)
    :custom
    (geiser-active-implementations '(guile))
    :init
    (with-eval-after-load 'org
      (add-to-list 'org-babel-load-languages '(scheme . t))))
#+end_src

*** Elisp

#+begin_src elisp
  (use-package parinfer-rust-mode
    :diminish
    :commands parinfer-rust-mode
    :hook
    (parinfer-rust-mode . (lambda ()
                            (electric-pair-local-mode -1)))
    emacs-lisp-mode
    ((emacs-lisp-mode) .
     (lambda ()
       (oskah/add-to-lookup-procs 'helpful-at-point)
       (electric-pair-local-mode -1)))

    :init
    (setq parinfer-rust-auto-download t))
#+end_src

*** C

#+begin_src elisp
  (use-package c-mode
    :defer t
    :elpaca nil
    :custom
    (c-ts-mode-indent-offset 4)
    (lsp-clients-clangd-args '("-j=3"
          				     "--background-index"
          				     "--clang-tidy"
                               "--all-scopes-completion"
          				     "--completion-style=detailed"
          				     "--header-insertion=iwyu"
          				     "--header-insertion-decorators=1"))

    :general
    (oskah/leader-keys '(c-mode-map c-ts-mode-map makefile-mode-map makefile-ts-mode-map)
      "mc" '(project-compile :wk "compile")
      "co" '(lsp-clangd-find-other-file :wk "switch header/source"))

    :hook
    ;; ((c-mode c++-mode c-ts-mode c++-ts-mode) . eglot-ensure)
    ((c-mode c++-mode c-ts-mode c++-ts-mode) .
     (lambda ()
       (oskah/add-to-lookup-procs 'oh/consult-man-at-point)))

    :init
    (with-eval-after-load 'org
      (add-to-list 'org-babel-load-languages '(C . t))))
    ;; (with-eval-after-load 'eglot
    ;;   (add-to-list 'eglot-server-programs
    ;;                '((c-mode c++-mode c-ts-mode c++-ts-mode) .
    ;;                  ("clangd"
    ;;                   "-j=4"
    ;;                   "--malloc-trim"
    ;;                   "--background-index"
    ;;                   "--clang-tidy"
    ;;                   "--cross-file-rename"
    ;;                   "--log=info"
    ;;                   "--header-insertion=iwyu"
    ;;                   "--header-insertion-decorators=0"
    ;;                   "--suggest-missing-includes")))))


#+end_src

Easily lookup man pages for the word at point

#+begin_src elisp
  (defun oh/consult-man-at-point ()
    "Search for the word at point using consult-man."
    (interactive)
    (let ((word (thing-at-point 'word)))
      (if word
          (consult-man word)
        (message "No word at point to search for"))))
#+end_src

Flycheck clang analyzer

#+begin_src elisp
  (use-package flycheck-clang-analyzer
    :ensure t
    :after c-mode c-ts-mode c++-mode c++-ts-mode
    :config (flycheck-clang-analyzer-setup))
#+end_src

Inline docstrings in .c files

#+begin_src elisp
  (use-package doc-show-inline
    ;; :after
    ;; c-mode c-ts-mode c++-mode c++-ts-mode
    :general
    (oskah/leader-keys '(c-mode-map c-ts-mode-map c++-mode-map c++-ts-mode-map)
      "td" '(doc-show-inline-mode :wk "inline docstrings"))
    :custom
    (doc-show-inline-face-background-highlight 0.0))
#+end_src

*** Rust

#+begin_src elisp
  (use-package rust-mode
    :mode "\\.rs\\'"
    ;; :hook (rust-ts-mode . (lambda ()
    ;;                         (flycheck-rust-setup)
    ;;                         (eglot-ensure))))
                            ;; (electric-pair-local-mode))))
    :general
    (oskah/leader-keys '(rust-mode-map rust-ts-mode-map)
      "mt" '(lsp-rust-analyzer-run :wk "rust-analyzer-run"))
    :init
    (with-eval-after-load "lsp-rust"
      (lsp-register-client
       (make-lsp-client
        :new-connection (lsp-tramp-connection "rust-analyzer")
        :remote? t
        :major-modes '(rust-mode rustic-mode rust-ts-mode)
        :initialization-options 'lsp-rust-analyzer--make-init-options
        :notification-handlers (ht<-alist lsp-rust-notification-handlers)
        :action-handlers (ht ("rust-analyzer.runSingle" #'lsp-rust--analyzer-run-single))
        :library-folders-fn (lambda (_workspace) lsp-rust-analyzer-library-directories)
        :ignore-messages nil
        :server-id 'rust-analyzer-remote))))
#+end_src

#+begin_src elisp
  (use-package flycheck-rust
    ;; :hook (rust-mode . #'flycheck-rust-setup)
    :init
    (with-eval-after-load 'rust-mode
      (add-hook 'flycheck-mode-hook #'flycheck-rust-setup)))
#+end_src

#+begin_src elisp
  (use-package cargo
    :hook (rust-mode . cargo-minor-mode)
    :general
    (oskah/leader-keys '(rust-mode-map rust-ts-mode-map)
      "mb" '(cargo-process-build :wk "cargo build")
      "mr" '(cargo-process-run :wk "cargo run")
      ;; "mt" '(cargo-process-test :wk "cargo test")
      "mx" '(cargo-process-clean :wk "cargo clean")
      "mc" '(cargo-process-check :wk "cargo check")
      "mR" '(cargo-process-repeat :wk "cargo repeat")
      "mD" '(cargo-process-doc :wk "cargo doc")
      "md" '(cargo-process-doc-open :wk "cargo doc open")
      "mX" '(cargo-process-run-example :wk "cargo run example")
      "mI" '(cargo-process-init :wk "cargo init")
      "mU" '(cargo-process-update :wk "cargo update")
      "mS" '(cargo-process-search :wk "cargo search")
      "mT" '(cargo-process-current-test :wk "cargo current test")
      "mF" '(cargo-process-fmt :wk "cargo fmt")
      "mC" '(cargo-process-clippy :wk "cargo clippy")
      "mB" '(cargo-process-bench :wk "cargo bench")))
#+end_src

*** Python

#+begin_src elisp
  (use-package python-mode
    :mode
    ("\\.py\\'" . python-mode)

    :init
    (with-eval-after-load 'org
      (add-to-list 'org-babel-load-languages '(python . t)))

    :config
    (lsp-register-custom-settings
     '(("pyls.plugins.pyls_mypy.enabled" t t)
       ("pyls.plugins.pyls_mypy.live_mode" nil t)
       ("pyls.plugins.pyls_black.enabled" t t)
       ("pyls.plugins.pyls_isort.enabled" t t)))

    :custom
    (lsp-pylsp-plugins-flake8-max-line-length 80)
    (lsp-pylsp-plugins-pycodestyle-max-line-length 80))
#+end_src

*** Gnuplot

#+begin_src elisp
  (use-package gnuplot
    :init
    (with-eval-after-load 'org
      ;; (org-babel-do-load-languages 'org-babel-load-languages '((gnuplot . t)))))
      (add-to-list 'org-babel-load-languages '(gnuplot . t))))
#+end_src

*** Maude

#+begin_src elisp
  (use-package maude-mode
    :mode "\\.maude\\'"
    :config
    (setq maude-indent 2)
    (electric-indent-local-mode -1))
#+end_src

*** Java

#+begin_src elisp
  (use-package lsp-java
    :after lsp)
#+end_src

*** Fish

#+begin_src elisp :lexical no
  (use-package fish-mode
    :mode "\\.fish\\'")
#+end_src

*** Yaml

#+begin_src elisp :lexical no
  (use-package yaml-mode
    :mode "\\.yml\\'")
#+end_src

*** Plantuml

#+begin_src elisp :lexical no
  (use-package plantuml-mode
    :init
    (with-eval-after-load 'org
      (add-to-list 'org-src-lang-modes
                   '("plantuml" . plantuml))
      (add-to-list 'org-babel-load-languages
                   '(plantuml . t)))

    :custom
    (plantuml-default-exec-mode 'executable)
    (org-plantuml-exec-mode 'plantuml)
    (plantuml-indent-level 4)
    :mode
    ("\\.plantuml\\'" . plantuml-mode)
    ("\\.puml\\'" . plantuml-mode)
    :config
    (setq plantuml-output-type "png"))
#+end_src

#+begin_src elisp :lexical no
  (use-package flycheck-plantuml
    :after plantuml-mode
    :custom
    (flycheck-plantuml-executable "plantuml")
    :config
    (flycheck-plantuml-setup))
#+end_src

*** Just

#+begin_src elisp
  (use-package just-mode
    :mode "\\.just\\'")
#+end_src

*** Dot

#+begin_src elisp
  (use-package graphviz-dot-mode
    :mode "\\.dot\\'"
    :config
    (setq graphviz-dot-indent-width 4))
#+end_src

*** Dockerfile

#+begin_src elisp
  (use-package dockerfile-mode
    :mode
    "Dockerfile\\'"
    "Containerfile\\'")

#+end_src

*** Latex

#+begin_src elisp :lexical no
  (use-package auctex
    :mode ("\\.tex\\'" . latex-mode)
    :custom
    (TeX-auto-save t)
    (TeX-parse-self t)
    (TeX-master nil)
    (TeX-view-program-selection '((output-pdf "PDF Tools"))))
    ;; (TeX-source-correlate-start-server t)

    ;; :config)
    ;; Update PDF buffers after successful LaTeX runs
    ;; (add-hook 'TeX-after-compilation-finished-functions
    ;;            #'TeX-revert-document-buffer))
#+end_src

*** Kotlin

#+begin_src elisp :lexical no
  (use-package kotlin-mode
    ;; :hook (kotlin-mode . lsp-deferred)
    :mode "\\.kt\\'") ; if you want this mode to be auto-enabled

  (use-package kotlin-ts-mode
    :mode "\\.kt\\'") ; if you want this mode to be auto-enabled
#+end_src

*** Yuck

#+begin_src elisp :lexical no
  (use-package yuck-mode
    :hook (yuck-mode . parinfer-rust-mode)
    :mode "\\.yuck\\'")
#+end_src

* Org mode
** Org

Minted needs to be installed on the system for pretty src-blocks in latex export.

#+begin_src elisp
  (use-package org
    :defer t
    :general
    (oskah/leader-keys org-mode-map "m '" 'org-edit-special)
    :hook
    (org-mode . variable-pitch-mode)
    (org-mode . (lambda () (auto-fill-mode 0)))
    (org-mode . (lambda () (visual-line-mode 1)))
    :custom-face
    (org-block
     ((t (:foreground unspecified
          :background ,(face-background 'default)
          :inherit fixed-pitch))))
    (org-italic
     ((t (:inherit (variable-pitch italic)))))
    (org-document-title
     ((t (:weight bold
          :font-size 1.75
          :inherit (variable-pitch)))))
    (org-drawer
     ((t (:height 0.8
          :inherit (fixed-pitch)))))
    (org-code
     ((t (:inherit (shadow fixed-pitch)))))
    (org-indent
     ((t (:inherit (org-hide variable-pitch)))))
    (org-verbatim
     ((t (:foreground ,nano-dark-popout
          :inherit (nano-salient fixed-pitch)))))
    (org-special-keyword
     ((t (:inherit (font-lock-comment-face fixed-pitch)))))
    (org-meta-line
     ((t (:inherit (font-lock-comment-face fixed-pitch)))))
    (org-checkbox
     ((t (:inherit (fixed-pitch)))))
    (org-table
     ((t (:inherit (nano-faded fixed-pitch)))))
    (org-formula
     ((t (:inherit (nano-faded fixed-pitch)))))
    (org-level-1
     ((t (:weight semi-bold
          :inherit (nano-strong variable-pitch)))))
    (org-level-2
     ((t (:weight semi-bold
                  :inherit (nano-strong variable-pitch)))))
    (org-level-3
     ((t (:weight semi-bold
                  :inherit (nano-strong variable-pitch)))))
    (org-level-4
     ((t (:weight semi-bold
                  :inherit (nano-strong variable-pitch)))))
    (org-level-5
     ((t (:weight semi-bold
                  :inherit (nano-strong variable-pitch)))))
    (org-level-6
     ((t (:weight semi-bold
                  :inherit (nano-strong variable-pitch)))))
    :custom
    (org-todo-keywords
     '((sequence "TODO(t)" "IN-PROGRESS(i)" "WAITING(w)" "|" "DONE(d)" "CANCELED(c)")))
    (org-capture-templates
      '(("t" "Todo" entry (file+headline org-default-notes-file "Tasks")
           "* TODO %?\n  %i\n  %a")
        ("n" "Note" entry (file+headline org-default-notes-file "Notes")
         "* %? :NOTE:\n %U\n  %i\n  %a \n  %:url")))
    (org-agenda-custom-commands
     '(("N" "Notes" tags "NOTE")
       ("A" "All todo" tags-todo nil)))
    (org-cycle-inline-images-display t)
    (org-pretty-entities t)
    (org-startup-indented t)
    (org-indent-indentation-per-level 2)
    (org-default-notes-file "~/Nextcloud/org_notes/notes.org")
    (org-agenda-files `(,org-default-notes-file))
    ;; (org-attach-use-inheritance t)   ; Make sure attachments are
                                     ; inherited throuch headings
    (org-hide-emphasis-markers t)
    (org-ellipsis " â†©")
    (org-confirm-babel-evaluate nil) ; Don't prompt me to confirm
                                     ; everytime I want to
                                     ; evaluate a block
    (org-directory "~/Nextcloud/org_notes/")
    (org-attach-id-dir "~/Nextcloud/org_notes/.attach/")
    ;; (plist-put org-format-latex-options :scale 2.0) ; Set scale
                                                    ; of preview images
    (org-attach-archive-delete 'query) ; ask to delete attachments
                                       ; when deleting a heading
    (org-export-with-tags nil)
    (org-startup-with-inline-images t)
    (org-startup-with-latex-preview t)
    (org-startup-folded 'show2levels)    ; Start org-mode with everything
    ;(org-startup-folded 'content)    ; Start org-mode with everything
                                     ; folded
    (shr-max-image-proportion 0.6)   ; Smaller max image size
    (org-export-with-smart-quotes t) ; Use smart quotes on export
    ;; (org-latex-pdf-process
    ;;  '("latexmk -f -pdf -%latex -interaction=nonstopmode -output-directory=%o %f"
    ;;    "latexmk -f -pdf -%latex -interaction=nonstopmode -output-directory=%o %f"))

    :general
    (oskah/leader-keys org-mode-map
      "ma" '(:ignore t :wk "attachments")
      "mau" '(org-attach-url :wk "attach URL")
      "mas" '(org-attach-sync :wk "sync attachments")
      "maS" '(org-attach-set-directory :wk "set attachment directory")
      "mao" '(org-attach-open :wk "open attachment")
      "me" '(org-export-dispatch :wk "export"))

    (oskah/leader-keys
      "aa" '(org-agenda :wk "agenda")
      "ac" '(org-capture :wk "capture")
      "al" '(org-store-link :wk "store link"))

    :config
    (message "Loading org-mode")
    (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.3))
    (add-to-list 'org-babel-load-languages '(latex . t))
    (add-to-list 'org-babel-load-languages '(shell . t))
    (add-to-list 'org-babel-load-languages '(ditaa . t))
    (add-to-list 'org-babel-load-languages '(dot . t))
     ;; (add-to-list 'org-latex-packages-alist '("" "tikz"))
     ;; (add-to-list 'org-latex-packages-alist '("" "minted"))
    (add-to-list 'org-latex-packages-alist '("" "listings"))
    (with-eval-after-load 'ox-latex
      (setq org-latex-listings 'listings)
      (setq org-latex-listings-options
            '(("basicstyle" "\\ttfamily\\footnotesize")
              ("breaklines" "true")
              ("showstringspaces" "false")
              ("postbreak" "\\mbox{$\\hookrightarrow$\\space}")
              ("tabsize" "2"))))

      ;; not sure I like this. But it's where nix puts it.
    (setq org-ditaa-jar-path "~/.nix-profile/lib/ditaa.jar")

    (org-babel-do-load-languages
     'org-babel-load-languages
     org-babel-load-languages)


     ;; Load extra export backends
    (require 'ox-beamer)
    (require 'ox-man)
    (require 'ox-texinfo))
#+end_src

Unfold heading:

#+begin_src elisp
  (defun oskah/org-unfold-heading ()
    "Show first children (or whichever ones be visible) and entry of heading.
  Assumes that point be at a heading."
    (interactive)
    (outline-hide-subtree)
    (org-fold-show-children)
    (org-fold-show-entry))

#+end_src

When evaluating a source block which generates an image the image will usually not be rendered immediately. This fixes that.

#+begin_src elisp
  (defun my/org-babel-after-execute-refresh-images ()
    "Refresh inline images after a src block is executed."
    (org-redisplay-inline-images))

  (add-hook 'org-babel-after-execute-hook
            'my/org-babel-after-execute-refresh-images)

#+end_src

Make the configuration get tangled on save.

#+begin_src elisp
  (with-eval-after-load 'org
    (defun oh/org-babel-tangle-config ()
      (when (string-equal (buffer-file-name)
                          (expand-file-name
                           (locate-user-emacs-file "configuration.org")))
        ;; Dynamic scoping to the rescue
        (let ((org-confirm-babel-evaluate nil)
              (path-prefix (expand-file-name user-emacs-directory))
              (prog-mode-hook nil))
          (org-babel-tangle)
          (byte-recompile-file (concat path-prefix "configuration.el")))))

    (add-hook 'org-mode-hook
              (lambda ()
                (add-hook 'after-save-hook #'oh/org-babel-tangle-config t t))))
#+end_src

The following is some code which allows for using the =:hidden= tag for src blocks to make them hidden.

#+begin_src elisp
  ;; (defun individual-visibility-source-blocks ()
  ;;   "Fold some blocks in the current buffer."
  ;;   (interactive)
  ;;   (org-show-block-all)
  ;;   (org-block-map
  ;;    (lambda ()
  ;;      (let ((case-fold-search t))
  ;;        (when (and
  ;;               (save-excursion
  ;;                 (beginning-of-line 1)
  ;;                 (looking-at org-block-regexp))
  ;;               (cl-assoc
  ;;                ':hidden
  ;;                (cl-third
  ;;                 (org-babel-get-src-block-info))))
  ;;          (org-hide-block-toggle))))))

  ;; (add-hook
  ;;  'org-mode-hook
  ;;  (function individual-visibility-source-blocks))
#+end_src

** Evil-org

#+begin_src elisp
  (use-package evil-org
    :diminish
    :after org
    :hook
    (org-mode .  evil-org-mode)
    ;; (org-agenda . evil-org-mode)
    :init
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+end_src

** Org-modern

#+begin_src elisp
  (use-package org-modern
    :hook (org-mode . org-modern-mode)
    :custom
    ;; (org-modern-statistics nil)
    (org-modern-todo nil)
    ;; (org-modern-checkbox nil)
    ;; (org-modern-progress nil)
    ;; (org-modern-tag nil)
    ;; (org-modern-priority nil)
    (org-modern-table nil)
    (org-modern-list
       '((?- . "â€¢")
         ;;(?* . "â€¢")
         (?+ . "â€£"))))
#+end_src

** Org-modern indent

Adds vertical lines next to src-blocks when org-indent is on

#+begin_src elisp
  (use-package org-modern-indent
    :disabled
    :after org
    :elpaca (org-modern-indent
             :type git
             :host github
             :repo "jdtsmith/org-modern-indent")
    :config ; add late to hook
    (add-hook 'org-mode-hook #'org-modern-indent-mode 90)
    (set-face-attribute 'org-modern-bracket-line nil
                        :family "Roboto Mono"
                        :weight 'regular))
#+end_src

** Appear

#+begin_src elisp
  (use-package org-appear
    :hook org-mode
    ;; :hook (org-mode . org-appear-mode))
    :custom
    (org-appear-inside-latex t)
    (org-appear-autosubmarkers t))
#+end_src

** Fragtog

#+begin_src elisp
  (use-package org-fragtog
    ;; :diminish
    :hook (org-mode . org-fragtog-mode))
#+end_src

** PDF preview

#+begin_src elisp
  (use-package org-inline-pdf
    :diminish
    :after org
    :hook (org-mode . org-inline-pdf-mode))
#+end_src

** Download

#+begin_src elisp
  (use-package org-download
    ;:demand
    :after org
    :custom
    (org-download-method 'attach)
    :general
    (oskah/leader-keys org-mode-map
      "map" 'org-download-clipboard
      "maf" 'org-download-screenshot
      "mar" 'org-download-rename-at-point))

#+end_src

** Src block completion

#+begin_src elisp
  (use-package org-block-capf
    :elpaca
    (org-block-capf :type git :host github :repo "xenodium/org-block-capf")
    :hook
    (org-mode . org-block-capf-add-to-completion-at-point-functions)
    :custom
    (org-block-capf-explicit-lang-defaults nil))
#+end_src

** ob-async
=ob-async= enables asynchronous execution of org-babel src blocks.
#+begin_src elisp
  (use-package ob-async
    :disabled
    :after org)
#+end_src

** Roam

#+begin_src elisp
  (use-package org-roam
    :custom
    (org-roam-completion-everywhere t)
    (org-roam-node-display-template "${title:*} ${tags:10}")
    (org-roam-directory (file-truename "~/Nextcloud/org_notes/roam"))
    (org-roam-dailies-directory (file-truename "~/Nextcloud/org_notes/daily"))
    (org-roam-capture-templates
              '(("d" "default" plain "%?"
                   :target
                        (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
                   :unnarrowed t
                  ("r" "reference" plain "%?"
                       :if-new
                       (file+head "references/%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: %^{filetags}\n")
                       :immediate-finish t
                       :unnarrowed t))))
    :general
    (oskah/leader-keys
      "nf" '(org-roam-node-find :wk "find")
      "nc" '(org-roam-capture :wk "capture")
      "ni" '(org-roam-node-insert :wk "insert")
      "nb" '(org-roam-buffer-toggle :wk "buffer")
      "nt" '(org-roam-tag-add :wk "add tag")
      "nl" '(consult-org-roam-backlinks :wk "backlinks")
      "nrr" '(org-roam-ref-find :wk "find ref")
      "nR" '(org-roam-refile :wk "refile")
      "na" '(org-roam-alias-add :wk "add alias"))

    :config
    (org-roam-db-autosync-mode 1))
#+end_src

*** org-roam-ui

A wonderfull graph that is shown in the browser.

#+begin_src elisp
  (use-package org-roam-ui
      ;; :after org-roam
  ;;         normally we'd recommend hooking orui after org-roam, but since
  ;;         org-roam does not have a hookable mode anymore, you're advised to
  ;;         pick something yourself if you don't care about startup time, use
  ;;  :hook (after-init . org-roam-ui-mode)
    :general
    (oskah/leader-keys
      "ng" '(org-roam-ui-mode :which-key "org-roam-ui"))
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))

#+end_src

*** Consult-org-roam
org-roam integration for consult.

#+begin_src elisp
  (use-package consult-org-roam
     :after org-roam
     :init
     ;; Activate the minor mode
     (consult-org-roam-mode 1)
     :custom
     ;; Use `ripgrep' for searching with `consult-org-roam-search'
     (consult-org-roam-grep-func #'consult-ripgrep)
     ;; Configure a custom narrow key for `consult-buffer'
     (consult-org-roam-buffer-narrow-key ?r)
     ;; Display org-roam buffers right after non-org-roam buffers
     ;; in consult-buffer (and not down at the bottom)
     (consult-org-roam-buffer-after-buffers t)
     :config
     ;; Eventually suppress previewing for certain functions
     (consult-customize
      consult-org-roam-forward-links
      :preview-key "M-."))
     ;; :bind)
     ;; Define some convenient keybindings as an addition
     ;; ("C-c n e" . consult-org-roam-file-find)
     ;; ("C-c n b" . consult-org-roam-backlinks)
     ;; ("C-c n l" . consult-org-roam-forward-links)
     ;; ("C-c n r" . consult-org-roam-search))
#+end_src

** Noter

#+begin_src elisp
  (use-package org-noter
    :after org
    :general
    (oskah/leader-keys
      "ne" '(org-noter :which-key "org-noter"))
    ('(normal visual insert emacs)
      'org-noter-doc-mode-map
     "i" '(org-noter-insert-note :which-key "insert note"))
    :custom
    (org-noter-auto-save-last-location t)
    (org-noter-notes-search-path
     '("~/Nextcloud/org_notes" "~/Nextcloud/org_notes/roam/bibliography")))
#+end_src

** Present

#+begin_src elisp
  (use-package org-present
    :after org
    :general
    (oskah/leader-keys 'org-mode-map
      "tp" '(org-present :wk "present"))
    :config
    (setq org-present-text-scale 2)
    (setq org-present-startup-folded t)
    (add-hook 'org-present-mode-hook
              (lambda ()
                ;; (focus-mode t)
                (org-present-big)
                (org-appear-mode -1)
                (org-present-read-only)
                (setq header-line-format " ")))
    (add-hook 'org-present-mode-quit-hook
              (lambda ()
                ;; (focus-mode -1)
                (org-present-small)
                (org-appear-mode t)
                (org-present-read-write)
                (setq header-line-format nil)
                (nano-modeline-org-mode))))
#+end_src

*** Focus

Highlight the text in focus

#+begin_src elisp
  (use-package focus
    :after org-present)
#+end_src

** Reveal
[[https://github.com/yjwen/org-reveal/][Org-Reveal]] is makes it possible to make beautiful =Reveal.js= presentations using Org-mode.

#+begin_src elisp
  (use-package ox-reveal
    :after org
    :custom
    (org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js")
    (org-reveal-theme "black")
    (org-reveal-init-options "slideNumber: true"))
#+end_src

=htmlize.el= is also needed to enable code highlighting using the emacs theme.
#+begin_src elisp
  (use-package htmlize
    :after ox-reveal)
#+end_src

** oc-pandoc

#+begin_src elisp :lexical no
  (use-package ox-pandoc
    :after org)
#+end_src

* Completion frameworks
** Vertico

Vertico provides a performant and minimalistic vertical completion UI based on the default completion system.
#+begin_src elisp
  (use-package vertico
    :defer 0
    :config
    (vertico-mode))
#+end_src

Allow using different vertico configurations for different prompts.

#+begin_src elisp
  (use-package vertico-multiform
    :elpaca nil
    :load-path
    (lambda () (expand-file-name "vertico/extensions" elpaca-builds-directory))
    :after vertico)
#+end_src

Allow displaying the vertico completions in a grid

#+begin_src elisp
  (use-package vertico-grid
    :after vertico
    :elpaca nil
    :load-path
    (lambda ()
      (expand-file-name "vertico/extensions" elpaca-builds-directory)))
#+end_src
** Corfu

Corfu enhances in-buffer completion with a small completion popup.

#+begin_src elisp
  (use-package corfu
    ;; :after vertico
    :defer 0
    :custom
    (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                 ;; Enable auto completion
    ;; (corfu-separator ?\s)          ;; Orderless field separator
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    (corfu-preselect 'first)      ;; Preselect the prompt
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin

    :config
    (global-corfu-mode)

    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    (setq tab-always-indent 'complete))


  (use-package corfu-popupinfo
    :after corfu
    :elpaca nil
    ;:custom
    ;(corfu-popupinfo-delay (1.0 0.5))
    :load-path
    (lambda ()
      (expand-file-name "corfu/extensions" elpaca-builds-directory))
    :config
    (corfu-popupinfo-mode))

  (use-package corfu-history
    :after corfu
    :elpaca nil
    :load-path
    (lambda ()
      (expand-file-name "corfu/extensions" elpaca-builds-directory))
    :config
    (corfu-history-mode))
#+end_src

 This snippet enables Corfu in =eval-expression=, and is stolen from [[https://codeberg.org/mjeu/dotemacs#user-content-headline-27][mjeu.]]

#+begin_src elisp
  (with-eval-after-load 'corfu
    (defun corfu-enable-always-in-minibuffer ()
      "Enable Corfu in the minibuffer if Vertico/Mct are not active."
      (unless (or (bound-and-true-p mct--active)
                  (bound-and-true-p vertico--input)
                  (eq (current-local-map) read-passwd-map))
        (setq-local corfu-echo-delay nil ; Disable automatic echo
                    corfu-popupinfo-delay 0.0)
        (corfu-mode 1)))

    (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer))


#+end_src

** Orderless

Adds Orderless completion style to Vertico

#+begin_src elisp
  (use-package orderless
    :after vertico
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

** Cape

Fancy addons for Corfu for better completions

#+begin_src elisp
  (use-package cape
    :after corfu
    :init
    ;; Add `completion-at-point-functions', used by `completion-at-point'.
    ;; NOTE: The order matters!
    (add-to-list 'completion-at-point-functions #'cape-elisp-block)
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-history))
    ;;(add-to-list 'completion-at-point-functions #'cape-keyword)
    ;;(add-to-list 'completion-at-point-functions #'cape-tex)
    ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
    ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
    ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
    ;; (add-to-list 'completion-at-point-functions #'cape-dict))
    ;;(add-to-list 'completion-at-point-functions #'cape-symbol)
    ;;(add-to-list 'completion-at-point-functions #'cape-line)
#+end_src

** Consult

#+begin_src elisp
  (use-package consult
    :defer 1
    :general
    (oskah/leader-keys
      "bb" '(consult-buffer :wk "consult buffer")
      "bB" '(consult-buffer-other-window :wk "consult buffer other window")
      "fr" '(consult-recent-file :wk "recent file")
      "sg" '(consult-ripgrep :wk "ripgrep")
      "ss" '(consult-line :wk "consult line")
      "sf" '(consult-fd :wk "find file"))
    (oskah/leader-keys org-mode-map
      "mh" '(consult-org-heading :wk "consult org heading"))
    :config
    (recentf-mode 1)
    (dolist (buffer '("\\`\\*scratch\\*\\'"
                      "\\`\\*Messages\\*\\'"
                      "\\`\\*Warnings\\*\\'"
                      "\\`\\*racket-langserver::stderr\\*\\'"
                      "\\`\\*Ibuffer\\*\\'"
                      "\\`\\*direnv\\*\\'"
                      "\\`\\*clangd\\*\\'"
                      "\\`\\*copilot-balancer\\*\\'"
                      "\\`\\*copilot events\\*\\'"
                      "\\`\\*Racket Logger </>\\*\\'"
                      "\\`\\*lsp-log\\*\\'"
                      "\\`\\*grammarly-ls\\*\\'"
                      "\\`\\*grammarly-ls::stderr\\*\\'"
                      "\\`\\*rust-analyzer\\*\\'"
                      "\\`\\*rust-analyzer::stderr\\*\\'"
                      "\\`\\*rnix-lsp\\*\\'"
                      "\\`\\*rnix-lsp::stderr\\*\\'"
                      "\\`\\*chatgpt\\*"
                      "\\`ChatGPT> compose\\'"
                      "\\`magit"
                      "\\`\\*Quail Completions\\*\\'"
                      "\\`\\*Async-native-compile-log\\*\\'"
                      "\\`\\*helpful"))
      (add-to-list 'consult-buffer-filter buffer)))


#+end_src

Consult

#+begin_src elisp
  (use-package consult-flycheck
    :after (consult flycheck)
    :general
    (oskah/leader-keys
      "ce" '(consult-flycheck :wk "show errors")))

#+end_src

** Embark

#+begin_src elisp
  (use-package embark
    :general
    (oskah/leader-keys
      "hb" '(embark-bindings :wk "describe bindings")
      "ea" '(embark-act :wk "embark act")
      "ed" '(embark-dwim :wk "default action")))
#+end_src

#+begin_src elisp
  (use-package embark-consult
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

** Marginalia

Description of commands and stuff in the Vertico buffer

#+begin_src elisp
  (use-package marginalia
    :after vertico
    ;; :custom
    ;; (vertico-cycle t)
    :config
    (marginalia-mode)
    (savehist-mode))
#+end_src

And some icons for the minibuffer as well:

#+begin_src elisp
  (use-package nerd-icons-completion
    :after marginalia
    :config
    (nerd-icons-completion-mode)
    (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup))
#+end_src

* Bibilo

#+begin_src elisp
  (defvar oh/bib-files
     '("~/Nextcloud/.org/references.bib"
       "~/Nextcloud/.org/bibliography/zotero.bib"
       "~/Nextcloud/.org/bibliography/uni/IN2000 gang.bib"
       "~/Nextcloud/.org/bibliography/uni/IN2120_gang-midterm.bib"))

  (defvar oh/roam-dir
    "~/Nextcloud/org_notes/roam/bibliography/")
  (defvar oh/library-dir
    "~/Nextcloud/.org/library/")

#+end_src

** Org-cite

#+begin_src elisp
  (use-package oc
    :elpaca nil
    :after org
    :custom
    (org-cite-csl-styles-dir "~/Zotero/styles")
    (org-cite-global-bibliography oh/bib-files)
    (org-cite-export-processors
     '((t csl))))
       ;; (latex biblatex))))
#+end_src

** Citar

#+begin_src elisp
  (use-package citar
    :hook
    (org-mode . citar-capf-setup)
    (latex-mode . citar-capf-setup)
    :general
    (oskah/leader-keys '(org-mode-map latex-mode-map)
      "mr" '(:ignore t :which-key "references")
      "mrc" '(citar-insert-citation :which-key "insert citation")
      "mre" '(citar-export-local-bib-file :which-key "export local bib file"))

    (oskah/leader-keys
      "nr" '(:ignore t :wk "references")
      "nro" '(citar-open :wk "open resource"))

    :custom
    (citar-citeproc-csl-styles-dir "~/Zotero/styles/")
    (citar-citeproc-csl-style "apa.csl")
    (bibtex-dialect 'biblatex)
    (citar-bibliography oh/bib-files)
    (citar-notes-paths (list oh/roam-dir))          ; List of directories for reference nodes
    (citar-open-note-function 'orb-citar-edit-note) ; Open notes in `org-roam'
    (citar-at-point-function 'embark-act)           ; Use `embark'
    (org-cite-insert-processor 'citar)
    (org-cite-follow-processor 'citar)
    (org-cite-activate-processor 'citar)

    :config
    (defvar citar-indicator-files-icons
      (citar-indicator-create
       :symbol (nerd-icons-faicon
                "nf-fa-file_o"
                :face 'nerd-icons-green
                :v-adjust -0.1)
       :function #'citar-has-files
       :padding "  " ; need this because the default padding is too low for these icons
       :tag "has:files"))
    (defvar citar-indicator-links-icons
      (citar-indicator-create
       :symbol (nerd-icons-codicon
                "nf-cod-link"
                :face 'nerd-icons-orange
                :v-adjust 0.01)
       :function #'citar-has-links
       :padding "  "
       :tag "has:links"))
    (defvar citar-indicator-notes-icons
      (citar-indicator-create
       :symbol (nerd-icons-codicon
                "nf-cod-note"
                :face 'nerd-icons-blue
                :v-adjust -0.3)
       :function #'citar-has-notes
       :padding "    "
       :tag "has:notes"))
    (defvar citar-indicator-cited-icons
      (citar-indicator-create
       :symbol (nerd-icons-faicon
                "nf-fa-circle_o"
                :face 'nerd-icon-green)
       :function #'citar-is-cited
       :padding "  "
       :tag "is:cited"))

    (setq citar-indicators
      (list citar-indicator-files-icons
            citar-indicator-links-icons
            citar-indicator-notes-icons
            citar-indicator-cited-icons)))
#+end_src

#+begin_src elisp
  (use-package citar-embark
    :after citar
    :no-require
    :config (citar-embark-mode))
#+end_src

#+begin_src elisp
  (use-package citar-org
    :elpaca nil
    :after (oc citar)
    :custom
    (org-cite-insert-processor 'citar)
    (org-cite-follow-processor 'citar)
    (org-cite-activate-processor 'citar))
#+end_src

** Citation rendering

#+begin_src elisp
  (use-package oc-csl-activate
    :disabled
    :after org
    :hook
    (org-mode . (lambda () (cursor-sensor-mode 1)))
    ;; This makes the citations render after every command, which might make the
    ;; editor slow.
    ;; (org-mode . (lambda () (add-hook 'post-command-hook
    ;;                                  (lambda ()
    ;;                                    (org-cite-csl-activate-render-all))
    ;;                                  90)))
    (org-mode . (lambda () (org-cite-csl-activate-render-all)))
    :elpaca (oc-csl-activate
             :type git
             :host github
             :repo "andras-simonyi/org-cite-csl-activate")
    :custom
    (org-cite-csl-activate-use-citar-cache t)
    :config
    ;; (setq org-cite-activate-processor 'csl-activate))
    (add-to-list 'citar-org-activation-functions
                 'org-cite-csl-activate))
#+end_src

** Citar-org-roam

#+begin_src elisp
  (use-package citar-org-roam
    :after (citar org-roam)
    :config (citar-org-roam-mode)
    :general
    (oskah/leader-keys
      "nrc" '(citar-org-roam-ref-add :wk "add ref"))
    :custom
    (citar-org-roam-capture-template-key "n")
    :config
    (add-to-list 'org-roam-capture-templates
       '("n" "literature note" plain
               "%?"
               :target
               (file+head
                "%(expand-file-name (or citar-org-roam-subdir \"\") org-roam-directory)/${citar-citekey}.org"
                "#+title: ${citar-citekey} (${citar-date}). ${note-title}.\n#+created: %U\n#+last_modified: %U\n\n")
               :unnarrowed t)))
#+end_src

* Misc
** Direnv

#+begin_src elisp
  (use-package direnv
   :config
   (direnv-mode))
#+end_src
** Treemacs

A filetree viewer

#+begin_src elisp
  (use-package treemacs
      :ensure t
      :defer t
      :custom
      (treemacs-width 25)
      :general
      (oskah/leader-keys
        "ot" '(treemacs :wk "treemacs"))

      :config
      (treemacs-follow-mode t)
      (treemacs-project-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode t))

  (use-package treemacs-magit
      :after treemacs)

  (use-package treemacs-nerd-icons
    :after treemacs
    :config
    (treemacs-load-theme "nerd-icons")
    :custom-face
    (treemacs-nerd-icons-root-face ((t (:inherit nil))))
    (treemacs-nerd-icons-folder-face ((t (:inherit nil))))
    (treemacs-nerd-icons-file-face ((t (:inherit nil)))))
#+end_src

** Yasnippet

#+begin_src elisp
  (use-package yasnippet
      :ensure t
      :config
      (yas-global-mode 1))
#+end_src

** SICP

#+begin_src elisp
  (use-package sicp)
#+end_src

** Dired

#+begin_src elisp
  (use-package dired
    :elpaca nil
    :commands (dired dired-jump)

    :custom
    (dired-listing-switches "-agho --group-directories-first")
    (dired-kill-when-opening-new-dired-buffer t)
    (dired-async-mode t)

    :general
    (oskah/leader-keys
      "fd" '(dired-jump :which-key "dired jump")
      "fD" '(dired-jump-other-window :which-key "dired"))

    ('normal 'dired-mode-map
      "h" 'dired-up-directory
      "l" 'dired-find-file)

    (oskah/leader-keys 'dired-mode-map
      "mo" '(oh/dired-xdg-open :which-key "open externally")))



#+end_src

Make it easy to open files using xdg from dired

#+begin_src elisp
  (with-eval-after-load 'dired
    (defun oh/dired-xdg-open ()
      "Open the file at point in Dired with xdg-open."
      (interactive)
      (let ((file (dired-get-file-for-visit)))
        (when file
          (let ((process-connection-type nil))
            (start-process "" nil "xdg-open" file))))))
#+end_src

** Esup

An emacs profiler

#+begin_src elisp
  (use-package esup
    :disabled
    :ensure t)
#+end_src

** Imenu-list

A minor mode which shows an automatically updated sidebar with the current buffers imenu entries.

#+begin_src elisp :lexical no
  (use-package imenu-list
    :custom
    (imenu-list-after-jump-hook #'my/org-tree-to-indirect-buffer)
    (imenu-list-position 'left)
    (imenu-list-size 36)
    (imenu-list-focus-after-activation t)
    :general
    (oskah/leader-keys
      "ti" '(imenu-list-smart-toggle :wk "toggle imenu list")))
#+end_src

** Eshell-fish

#+begin_src elisp
  (use-package fish-completion
    ;:hook (eshell-mode . fish-completion-mode)
    :disabled
    :if (executable-find "fish")
    :after eshell
    :config
    (global-fish-completion-mode))
#+end_src

** Vterm

#+begin_src elisp :lexical no
  (use-package vterm
    :general
    (oskah/leader-keys
      "pv" '(projectile-run-vterm :wk "projectile vterm")
      "pV" '(projectile-run-vterm-other-window :wk "projectile vterm other window")
      "ov" '(vterm :wk "vterm")
      "oV" '(vterm-other-window :wk "vterm other window")))
#+end_src

This is the configuration that should be put in ~~/.config/fish/config.fish~. This is describe in the [[https://github.com/akermu/emacs-libvterm/tree/94e2b0b2b4a750e7907dacd5b4c0584900846dd1#shell-side-configuration][GitHub]].

#+begin_src fish
  function vterm_prompt_end;
      vterm_printf '51;A'(whoami)'@'(hostname)':'(pwd)
  end
  functions --copy fish_prompt vterm_old_fish_prompt
  function fish_prompt --description 'Write out the prompt; do not replace this. Instead, put this at end of your file.'
      # Remove the trailing newline from the original prompt. This is done
      # using the string builtin from fish, but to make sure any escape codes
      # are correctly interpreted, use %b for printf.
      printf "%b" (string join "\n" (vterm_old_fish_prompt))
      vterm_prompt_end
  end
#+end_src

** Eww

The emacs web browser

#+begin_src elisp
  (use-package eww
   :elpaca nil
   :commands (oh/switch-to-eww-buffer)
   ;; :custom
   ;; (shr-use-fonts nil)
   :general
   (oskah/leader-keys
     "ow" '(oh/switch-to-eww-buffer :wk "eww"))

   :config
   (defun oh/switch-to-eww-buffer ()
     "Switches to an existing EWW buffer, if one exists."
     (interactive)
     (let ((eww-buf (catch 'found
                      (dolist (buf (buffer-list))
                        (when (with-current-buffer buf
                                (eq major-mode 'eww-mode))
                          (throw 'found buf))))))
       (if eww-buf
           (switch-to-buffer eww-buf)
         (call-interactively 'eww)))))
#+end_src

** ssh-deploy
Deploy code to remote server via ssh

#+begin_src elisp
  (use-package ssh-deploy
    :after hydra
    :hook ((after-save . ssh-deploy-after-save)
           (find-file . ssh-deploy-find-file))
    :config
    ;; (ssh-deploy-line-mode) ;; If you want mode-line feature
    ;; (ssh-deploy-add-menu) ;; If you want menu-bar feature
    (ssh-deploy-hydra "C-c C-z")) ;; If you want the hydra feature

#+end_src

** PDF

#+begin_src elisp
  (use-package pdf-tools
    :elpaca nil
    :hook
    (pdf-view-mode-hook . evil-normal-state)
    ;; :elpaca nil
    :mode ("\\.pdf\\'" . pdf-view-mode))
    ;; :custom
    ;; (pdf-view-midnight-colors (cons (face-foreground 'default)
    ;;                                 (face-background 'default)))
    ;; :config
    ;; (pdf-tools-install))
#+end_src

** Mail
To use =mbsync= over a secure connection add
#+begin_example
  SSLType STARTTLS
  SSLVersions TLSv1.2
  CertificateFile ~/.cert/protonmail.crt
#+end_example
to =.mbsyncrc= and put the certificate generated by ~openssl s_client -starttls imap -connect 127.0.0.1:1143 -showcerts~ in =~/.cert/protonmail.crt=, i.e. the lines between (and incluying) =-----BEGIN CERTIFICATE-----= and =-----END CERTIFICATE-----=

Just to make it complete my =.mbsyncrc= file looks as follows
#+begin_src conf
IMAPAccount proton
Host 127.0.0.1
Port 1143
User ohaukeboe@pm.me
SSLType STARTTLS
Pass *****
# CertificateFile /etc/ssl/certs/ca-certificates.crt
CertificateFile ~/.mail/.cert/protonmail.crt

IMAPStore proton-remote
Account proton

MaildirStore proton-local
Subfolders Verbatim
Path ~/.mail/proton/
Inbox ~/.mail/proton/Inbox
Trash ~/.mail/proton/Trash

Channel proton
Far :proton-remote:
Near :proton-local:
Patterns *
Expunge None
CopyArrivalDate yes
Sync All
Create Both
SyncState *
#+end_src
and my =.msmtprc= file looks like:
#+begin_src conf
  # Set default values for all following accounts.
  defaults
  auth           on
  tls            on
  tls_trust_file ~/.mail/.cert/protonmail.crt
  logfile        ~/.msmtp.log

  # Proton
  account        proton
  host           127.0.0.1
  port           1025
  tls_starttls   on
  from           ohaukeboe@pm.me
  user           ohaukeboe@pm.me
  password       *****

  # Set a default account
  account default: proton
#+end_src

#+begin_src elisp
  (use-package mu4e
    :elpaca nil
    :defer t
    :if (and (file-exists-p "~/.mail")
             (executable-find "mbsync")
             (executable-find "msmtp")
             (executable-find "mu"))
    :general
    (oskah/leader-keys
      "om" '(mu4e :which-key "mu4e"))

    :custom
    (mu4e-split-view nil)
    (mail-user-agent 'mu4e-user-agent)
    (shr-use-colors nil)

    :config
    (setq sendmail-program (executable-find "msmtp")
          send-mail-function 'smtpmail-send-it
          mu4e-root-maildir "~/.mail"

          message-sendmail-f-is-evil t
          message-sendmail-extra-arguments '("--read-envelope-from")
          message-send-mail-function 'message-send-mail-with-sendmail
          message-kill-buffer-on-exit t

          mu4e-get-mail-command (concat (executable-find "mbsync") " -a")
          mu4e-change-filenames-when-moving t

          mu4e-use-fancy-chars t)

    (setq mu4e-contexts
          (list
           ;; (make-mu4e-context
           ;;  :name "ifi"
           ;;  :match-func
           ;;  (lambda (msg)
           ;;    (when msg
           ;;      (string-prefix-p "/ifi" (mu4e-message-field msg :maildir))))
           ;;  :vars '((user-mail-address . "oskah@ifi.uio.no")
           ;;          (user-full-name . "Oskar HaukebÃ¸e")
           ;;          (mu4e-sent-folder . "/ifi/Sent Items")
           ;;          (mu4e-trash-folder . "/ifi/Deleted Items")
           ;;          (mu4e-drafts-folder . "/ifi/Drafts")
           ;;          (mu4e-refile-folder . "/ifi/Archive")
           ;;          (smtpmail-smtp-user .)))
           (make-mu4e-context
            :name "proton"
            :match-func
            (lambda (msg)
              (when msg
                (string-prefix-p "/proton" (mu4e-message-field msg :maildir))))
            :vars '((user-mail-address . "ohaukeboe@pm.me")
                    (user-full-name . "Oskar HaukebÃ¸e")
                    (mu4e-sent-folder . "/Sent")
                    (mu4e-trash-folder . "/Trash")
                    (mu4e-drafts-folder . "/Drafts")
                    (mu4e-refile-folder . "/Archive")
                    (smtpmail-smtp-user . "ohaukeboe@pm.me")
                    (mu4e-compose-signature . nil))))))
#+end_src

Org-msg allows for composing the mail using orgmode, and then send it as beautifull html.

#+begin_src elisp
  (use-package org-msg
      :ensure t
      :config
      (setq org-msg-options "html-postamble:nil H:5 num:nil ^:{} toc:nil author:nil email:nil \\n:t"
            org-msg-startup "hidestars indent inlineimages"
            org-msg-greeting-fmt "\nHi%s,\n\n"

            org-msg-recipient-names '(("ohaukeboe@pm.me" . "Oskar"))
            org-msg-greeting-name-limit 3
            org-msg-default-alternatives '((new		. (text html))
                                           (reply-to-html	. (text html))
                                           (reply-to-text	. (text)))
            org-msg-convert-citation t
            org-msg-signature "

  Cheers,
  ,#+begin_signature
  Oskar
  ,#+end_signature")
      (org-msg-mode))
#+end_src

#+begin_src emacs-lisp
(use-package mu4e-marker-icons
  :ensure t
  :init (mu4e-marker-icons-mode 1))
#+end_src

** Vundo
Not undo-tree

#+begin_src elisp
  (use-package vundo
    :custom
    (vundo-glyph-alist vundo-unicode-symbols)
    (vundo-window-max-height 10)
    :general
    (oskah/leader-keys
      "u" '(vundo :wk "not undo tree")))
#+end_src

** Undo-fu
Save & recover undo steps between Emacs sessions.

#+begin_src elisp
  (use-package undo-fu
    :custom
    (undo-limit (* 64 1024 1024))               ; 64mB.
    (undo-strong-limit (* 96 1024 1024))        ; 96mB.
    (undo-outer-limit (* 10 undo-strong-limit))) ; 960mB.

  (use-package undo-fu-session
    :init
    (undo-fu-session-global-mode))
#+end_src

** SQLite

#+begin_src elisp
  (use-package sqlite3
    :defer t)
#+end_src
** Spell check
This sets up spell-checking using both English and Norwegian dictionaries together. It is also necessary to install =hunspell-en_us= and =hunspell-nb=. Jinx is a much faster alternative to flyspell, and it also supports combining dictionaries.

#+begin_src elisp
  (use-package jinx
    ;:hook (elpaca-after-init . global-jinx-mode)
    :elpaca nil
    :defer 0
    :custom
    (jinx-languages "en_US nb_NO")
    :general
    (oskah/leader-keys
      "sc" '(jinx-correct :wk "correct previous")
      "ts" '(jinx-mode :wk "toggle spellcheck"))
    :config
    (global-jinx-mode 1)
    (with-eval-after-load 'vertico
      (add-to-list 'vertico-multiform-categories
                   '(jinx grid
                          ;; (:not indexed)
                          (vertico-grid-annotate . 20)))
      (vertico-multiform-mode 1)))
#+end_src

Grammarly:

#+begin_src elisp
  (use-package lsp-grammarly
    :after lsp-mode
    :custom
    (lsp-grammarly-suggestions-oxford-comma t)
    (lsp-grammarly-modes '(text-mode latex-mode org-mode))) ;; markdown-mode)))
#+end_src

Languagetool:

#+begin_src elisp
  (use-package languagetool
    :commands (languagetool-check
               languagetool-clear-suggestions
               languagetool-correct-at-point
               languagetool-correct-buffer
               languagetool-set-language
               languagetool-server-mode
               languagetool-server-start
               languagetool-server-stop)
    :general
    (oskah/leader-keys
      "sl" '(languagetool-correct-at-point :wk "languagetool correct"))

    :config
    (setq languagetool-java-arguments '("-Dfile.encoding=UTF-8"
                                        "-cp" "/usr/share/languagetool:/usr/share/java/languagetool/*")
          languagetool-console-command "~/.nix-profile/share/languagetool-commandline.jar"
          languagetool-server-command "~/.nix-profile/share/languagetool-server.jar")

    (add-to-list 'languagetool-disabled-rules "misspelling"))
#+end_src

** Ripgrep

#+begin_src elisp
  (use-package rg
    :defer t)
#+end_src

** Thesaurus

#+begin_src elisp
  (use-package powerthesaurus
    :defer t
    :general
    (oskah/leader-keys
      "st" '(powerthesaurus-hydra/body :wk "thesaurus")))
#+end_src

** Copilot
#+begin_src elisp
  (use-package copilot
    :defer t
    :elpaca (:host github
             :repo "zerolfx/copilot.el"
             :main nil
             :files ("dist" "*.el"))
    ;; :hook (prog-mode . copilot-mode)
    :general
    (oskah/leader-keys "ta" '(copilot-mode :wk "copilot"))

    :bind (("C-TAB" . 'copilot-accept-completion-by-word)
           ("C-<tab>" . 'copilot-accept-completion-by-word)
           :map copilot-completion-map
           ("<tab>" . 'copilot-accept-completion)
           ("TAB" . 'copilot-accept-completion)))
#+end_src

I don't want copilot to start on emacs startup, but I also want it to be hooked to ='prog-mode-hook=, which in case is run on startup. I therefore have a /nice/ lambda expression to load hook it after emacs has loaded. I also added a small delay to make it easier to analyze when packages are loaded as the startup message is also run on ='emacs-startup-hook=.

#+begin_src elisp
  (add-hook 'elpaca-after-init-hook
            (lambda ()
              (run-at-time "5 sec" nil
                           (lambda ()
                             (add-hook 'prog-mode-hook 'copilot-mode)
                             (when (derived-mode-p 'prog-mode)
                               (copilot-mode))))))
#+end_src

** ChatGPT

#+begin_src elisp
  (defvar openai-key-memo nil "Memoized OpenAI key")

  (use-package chatgpt-shell
    :commands (chatgpt-shell)
    :diminish
    :custom
    (chatgpt-shell-model-versions '("gpt-4-1106-preview"))
    ;; (chatgpt-shell-model-version)
    (chatgpt-shell-openai-key
     (lambda ()
       (if openai-key-memo
           openai-key-memo
         (setq openai-key-memo (auth-source-pass-get 'secret "openai-key")))))

    :general
    (oskah/leader-keys
      "ogg" '(chatgpt-shell :wk "gpt-shell")
      "ogd" '(oh/chatgpt-shell-generate-docstring :wk "generate docstring")
      "ogc" '(chatgpt-shell-prompt-compose :wk "prompt and compose")
      "ogr" '(chatgpt-shell-refactor-code :wk "refactor code")
      "ogp" '(chatgpt-shell-proofread-region :wk "proofread region"))

    (oskah/leader-keys chatgpt-shell-mode-map
      "ms" '(chatgpt-shell-save-session-transcript :wk "save session")
      "ml" '(chatgpt-shell-restore-session-from-transcript :wk "load session"))
    :config
    (message "chatgpt-shell loaded"))


  (use-package dall-e-shell
    :commands (dall-e-shell)
    :diminish
    :custom
    (dall-e-shell-model-version "dall-e-3")
    (dall-e-shell-openai-key
     (lambda ()
       (if openai-key-memo
           openai-key-memo
         (setq openai-key-memo (auth-source-pass-get 'secret "openai-key")))))
    :general
    (oskah/leader-keys
      "od" '("dall-e" . dall-e-shell))
    :config
    (message "dall-e-shell loaded"))

  (use-package ob-chatgpt-shell
    :after org
    :disabled
    :diminish
    :config 'ob-chatgpt-shell-setup)
#+end_src

Install svg parser for using prompts by awesome-promts

#+begin_src elisp
  (use-package pcsv
    :after chatgpt-shell dall-e-shell)
#+end_src

My own custom promt for generating docstrings

#+begin_src elisp
  (with-eval-after-load 'chatgpt-shell
    (defun oh/chatgpt-shell-generate-docstring ()
      "Generate docstring for the code from region using ChatGPT."
      (interactive)
      (chatgpt-shell-send-region-with-header "Please help me generate a docstring
    for the following")))
#+end_src

** Editorconfig
#+begin_src elisp
  (use-package editorconfig
    :defer 0
    :config
    (editorconfig-mode 1))
#+end_src
** Helpful
A better help buffer
#+begin_src elisp
  (use-package helpful
    :diminish
    ;; :custom
    ;; (counsel-describe-function-function #'helpful-callable)
    ;; (counsel-describe-variable-function #'helpful-variable)
    :general
    ;; ('normal "K" 'helpful-at-point)

    (oskah/leader-keys
      "hp" 'describe-package
      "ht" 'describe-theme
      "hv" 'describe-variable
      "hf" 'describe-function
      "hk" 'describe-key)

    :bind
    ([remap describe-function] . helpful-function)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-key] . helpful-key)
    ([remap describe-command] . helpful-command))
#+end_src

** Which-key
#+begin_src elisp
  (use-package which-key
    :defer 0
    :custom
    (which-key-idle-delay 0.3)
    :config
    (which-key-mode))
#+end_src
** Wakatime
I've encountered issues with the =wakatime-cli= program not functioning properly. As a result, I've discovered that the most dependable method to install Wakatime is by using the Wakatime VS Code extension and simply directing it to the binary installed by VS Code.

#+begin_src elisp
  (use-package wakatime-mode
    :defer 5
    :config
    (setq wakatime-disable-on-error t)
    (setq wakatime-cli-path "~/.wakatime/wakatime-cli")
    (global-wakatime-mode))
#+end_src

** Keep folders clean

No littering puts the files that packages places in the emacs directory into
=var/= and =etc/= in the emacs directory.

#+begin_src elisp
  (use-package no-littering
    :demand t
    :custom
    (auto-save-file-name-transforms
     `((".*" ,(no-littering-expand-var-file-name "auto-save/") t))))
#+end_src

** Devilry
#+begin_src elisp
  (use-package devilry-mode
    :elpaca (devilry-mode :type git :host github :repo
                          "MathiasCiarlo/devilry-mode")
    :config
    (setq dm-java-compilation nil)
    :general
    (oskah/leader-keys
      "tD" '(devilry-mode :wk "devilry"))
    (oskah/leader-keys '(devilry-mode-map)
      "md" '(dm-do-oblig :wk "do oblig")
      "mc" '(desktop-hard-clear :wk "clear desktop")))
#+end_src

* Startup performance message
A message which says how long it took to load emacs. It can be useful for
knowing how much/if packages slow down the emacs startup.

#+begin_src elisp
   (defun oskah/display-startup-time ()
       (message "Emacs loaded in %s with %d garbage collections."
          (format "%.2f seconds"
                  (float-time
                     (time-subtract after-init-time before-init-time)))
          gcs-done))

   (add-hook 'emacs-startup-hook #'oskah/display-startup-time) ;
  ;; (setq use-package-verbose t)
#+end_src

* Spell checker local stuff
# Local Variables:
# jinx-local-words: "Direnv Eglot Flycheck Imenu LanuageTool Matchit Orderless Ripgrep Vundo elpaca eshell svg"
# End:
