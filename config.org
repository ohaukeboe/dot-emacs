#+title: My Emacs configuration
:HEADER:
#+startup: fold hideblocks
#+property: header-args:elisp :tangle yes

# Local Variables:
# eval: (add-hook 'after-save-hook #'org-babel-tangle nil t)
# End:
:END:

Welcome to my literate Emacs configuration. It is written in org-mode as I find that it helps keeping it tidy.

* Personal information

#+begin_src elisp
  (setq user-full-name "Oskar Haukeb√∏e"
        user-mail-address "ohaukeboe@pm.me")
#+end_src

* Emacs initialization
It is a good idea to increase the =gc-cons-threshold= and =gc-cons-percentage= variables during initialization to speed up the startup process. We'll lower the values after initialization is done.

#+begin_src elisp
  (eval-and-compile
    (setq gc-cons-threshold 402653184
          gc-cons-percentage 0.6))
#+end_src

I don't particularly enjoy getting warnings stemming from third-party packages. I'll just disable them.

#+begin_src elisp
  (setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local))
  (setq warning-minimum-level :error)
#+end_src

* Package management
** Elpaca
I use [[https://github.com/progfolio/elpaca][elpaca]] to manage my packages. It is a simple package manager that allows users to find, install, update, and remove third-party packages for Emacs. It is a replacement for the built-in Emacs package manager, =package.el=.

Installing elpaca requires this snippet to be added to the Emacs configuration file.

#+begin_src elisp
  (defvar elpaca-installer-version 0.7)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                                :ref nil :depth 1
                                :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                                :build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
         (build (expand-file-name "elpaca/" elpaca-builds-directory))
         (order (cdr elpaca-order))
         (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
          (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                   ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                   ,@(when-let ((depth (plist-get order :depth)))
                                                       (list (format "--depth=%d" depth) "--no-single-branch"))
                                                   ,(plist-get order :repo) ,repo))))
                   ((zerop (call-process "git" nil buffer t "checkout"
                                         (or (plist-get order :ref) "--"))))
                   (emacs (concat invocation-directory invocation-name))
                   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                         "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                   ((require 'elpaca))
                   ((elpaca-generate-autoloads "elpaca" repo)))
              (progn (message "%s" (buffer-string)) (kill-buffer buffer))
            (error "%s" (with-current-buffer buffer (buffer-string))))
        ((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))
#+end_src

Elpaca requires =package.el= to be disabled.

#+begin_src elisp :tangle early-init.el
  (setq package-enable-at-startup nil)
#+end_src


It also integrates nicely with =use-package=.

#+begin_src elisp
  (elpaca elpaca-use-package
    (elpaca-use-package-mode)
    (setq elpaca-use-package-by-default t))

  ;; Block untill current queue processed.
  (elpaca-wait)
#+end_src

** use-package

#+begin_src elisp
  (setq use-package-always-defer t)
#+end_src

** Benchmark
This is a handy package which helps showing what packages are slowing down the Emacs init time.

#+begin_src elisp
  (use-package benchmark-init
    :ensure t
    :init
    ;; To disable collection of benchmark data after init is done.
    (benchmark-init/activate)
    ;; (add-hook 'after-init-hook 'benchmark-init/deactivate)
    (add-hook 'after-init-hook
              (lambda ()
                (run-at-time 5 nil 'benchmark-init/deactivate))))
#+end_src

* Look and  feel

#+begin_src elisp
  (use-package emacs
    :ensure nil
    :hook
    (before-save . delete-trailing-whitespace)

    :init
    (load-theme 'wombat)

    ;; Set font
    (custom-theme-set-faces
     'user
     '(default ((t (:family "Roboto Mono" :height 110))))
     '(fixed-pitch ((t (:family "Roboto Mono" :height 0.9))))
     '(variable-pitch ((t (:family "Roboto Serif" :height 1.3)))))
    (set-frame-font "Roboto Mono" nil t)

    ;; Disable menu bar, tool bar, scroll bar
    (when scroll-bar-mode (scroll-bar-mode -1)) ; Disable scroll bar
    (tool-bar-mode -1)                          ; Disable tool bar
    (menu-bar-mode -1)                          ; Disable menu bar
    (window-divider-mode t)                     ; Add spacing between windows
    (global-display-line-numbers-mode t)        ; Show line numbers
    (global-auto-revert-mode t)                 ; Auto refresh buffers
    (electric-pair-mode t)                      ; Auto close brackets
    (set-fringe-mode 0)                         ; Disable fringe

    (dolist (mode '(org-mode-hook
                    Info-mode-hook
                    dashboard-mode-hook
                    special-mode-hook
                    image-mode-hook
                    pdf-view-mode-hook
                    term-mode-hook
                    vterm-mode-hook
                    shell-mode-hook
                    eshell-mode-hook))
      (add-hook mode (lambda () (display-line-numbers-mode 0))))


    :custom
    ;; Sane defaults
    (use-short-answers t)                       ; y/n instead of yes/no
    (word-wrap t)                               ; Wrap lines at space between words
    (truncate-lines t)                          ; Truncate lines instead of wrapping
    (initial-scratch-message nil)               ; Clean scratch buffer
    (auto-revert-interval 1)                    ; Refresh buffers every second
    (split-width-threshold 160)                  ; Split vertically by default
    (split-height-threshold nil)                ; Split vertically by default
    ;; (display-line-numbers-type 'relative)       ; Show relative line numbers
    (use-dialog-box nil)                        ; Disable dialog boxes
    (inhibit-startup-screen t)                  ; Disable startup screen
    (recentf-max-saved-items 100)               ; Show more recent files
    (scroll-margin 1)                           ; Add margin when scrolling
    (backup-directory-alist                     ; Put backups in var/backups
     `(("." . ,(concat user-emacs-directory "var/backups"))))
    (indent-tabs-mode nil)                      ; Use spaces instead of tabs
    (tab-width 2)                               ; Set tab width to 2 spaces



    ;; Add spacing between windows
    (window-divider-default-right-width 10)
    (window-divider-default-places 'right-only)


    ;; Allow undo/redo window configuration with C-c <left>/<right>
    (winner-mode 1))
#+end_src

** Nerd icons
This package provides a set of icons for Emacs.

#+begin_src elisp
  (use-package nerd-icons
    :ensure t
    :custom
    (nerd-icons-nerd-font-font-family "Symbols Nerd Font Mono")
    :config
    (setq nerd-icons-install-font t))
#+end_src

** NANO
I find that [[https://github.com/rougier/nano-modeline][nano modeline]] looks very good. I have also installed the [[https://github.com/rougier/nano-theme][nano theme]] and then simply changed all the colors in order to have a properly dark theme. When finding these colors I found the [[https://www.colorhexa.com/][colorhexa]] website to be a great resource.

#+begin_src elisp
  (use-package nano-theme
    :disabled
    ;; :custom
    ;; (nano-dark-foreground "#e8d6c6")
    ;; (nano-dark-background "#171717")
    ;; (nano-dark-highlight  "#2b2b2b")
    ;; (nano-dark-critical   "#EBCB8B")
    ;; (nano-dark-salient    "#aac5dd")
    ;; (nano-dark-strong     "#e8dfc6")
    ;; (nano-dark-popout     "#d79ca3")
    ;; (nano-dark-subtle     "#212121")
    ;; (nano-dark-faded      "#c69a72")

    ;; (nano-light-background "#fafafa")
    :init
    (load-theme 'nano-dark t))
    ;; :config)

    ;; (defun oh/set-org-faces ()
    ;;   "Make org source blocks have the same background as the default face."
    ;;   (with-eval-after-load 'org-faces
    ;;    (set-face-attribute 'org-block nil :background (face-background 'default))))

    ;; (oh/set-org-faces))



    ;; (defun oh/cycle-themes ()
    ;;   "Returns a function that lets you cycle your themes."
    ;;   (let ((themes '(nano-dark nano-light)))
    ;;     (lambda ()
    ;;       (interactive)
    ;;       ;; Rotates the theme cycle and changes the current theme.
    ;;       (let ((rotated (nconc (cdr themes) (list (car themes)))))
    ;;         (load-theme (car (setq themes rotated)) t))
    ;;       ;; (oh/set-org-faces)
    ;;       (message (concat "Switched to " (symbol-name (car themes))))))))
#+end_src

#+begin_src elisp
  (use-package nano-modeline
    :demand
    :init
    (setq-default mode-line-format nil)  ; disable default mode-line
    :hook
    (prog-mode            . nano-modeline-prog-mode)
    (text-mode            . nano-modeline-text-mode)
    (org-mode             . nano-modeline-org-mode)
    (pdf-view-mode        . nano-modeline-pdf-mode)
    (mu4e-headers-mode    . nano-modeline-mu4e-headers-mode)
    (mu4e-view-mode       . nano-modeline-mu4e-message-mode)
    (elfeed-show-mode     . nano-modeline-elfeed-entry-mode)
    (elfeed-search-mode   . nano-modeline-elfeed-search-mode)
    (term-mode            . nano-modeline-term-mode)
    (xwidget-webkit-mode  . nano-modeline-xwidget-mode)
    (messages-buffer-mode . nano-modeline-message-mode)
    (org-capture-mode     . nano-modeline-org-capture-mode)
    (org-agenda-mode      . nano-modeline-org-agenda-mode))
#+end_src

#+begin_src elisp
  (use-package nano-agenda
    :disabled       ; It's probably gonna be useful when I start using org-agenda
    :commands (nano-agenda))
#+end_src

* Keybinds
** general

General is a package that provides a keybinding framework. It integrates nicely with =use-package= as well as =evil=.

#+begin_src elisp
  (use-package general
    :init
    (general-create-definer oh/leader-key
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC"
      :global-prefix "C-SPC"))

  ;; Wait until this is setup before loading the rest of the config.
  ;; This is needed for the =:general= flag to work.
  (elpaca-wait)
#+end_src

** evil
Evil is an extensible vi layer for Emacs. It is a very powerful package that allows you to use Emacs as if it were Vim. It is also very well integrated with =use-package=.

#+begin_src elisp
  (use-package evil
    :custom
    (evil-want-keybinding nil)
    (evil-want-C-u-scroll t)
    (evil-want-C-i-jump t)
    (evil-undo-system 'undo-fu)

    :init
    (evil-mode 1)

    :config
    (evil-global-set-key 'normal (kbd "j") 'evil-next-visual-line)
    (evil-global-set-key 'normal (kbd "k") 'evil-previous-visual-line))
#+end_src

=evil-collection= is a collection of Evil keybindings for many Emacs packages.

#+begin_src elisp
  (use-package evil-collection
    :after evil
    :init
    (evil-collection-init))
#+end_src

*** Commenter
=evil-commenter= provides keybindings for commenting and uncommenting lines.

#+begin_src elisp
  (use-package evil-nerd-commenter
    :after evil
    :general
    ('(normal visual)
      "gc" 'evilnc-comment-or-uncomment-lines)

    :init
    (evilnc-default-hotkeys))
#+end_src

*** Surround
=evil-surround= provides keybindings for surrounding text with pairs of characters, or changing the surrounding characters.

#+begin_src elisp
  (use-package evil-surround
    :after evil
    :init
    (global-evil-surround-mode))
#+end_src

*** Goggles
Add visual hints to ceirtain evil opperations such as yank.

#+begin_src elisp
  (use-package evil-goggles
    :after evil
    :custom
    (evil-goggles-enable-delete nil)
    :init
    (evil-goggles-mode))
#+end_src

*** Lion
=evil-lion= provides keybindings for aligning text.

#+begin_src elisp
  (use-package evil-lion
    :after evil
    :general
    ('(normal visual) "g l" 'evil-lion-left
                      "g L" 'evil-lion-right)
    :config
    (evil-lion-mode))
#+end_src

** Top level keybindings

#+begin_src elisp
  (oh/leader-key ":" '(execute-extended-command :wk "M-x")
                 ";" '(eval-expression :wk "Eval")
                 "." '(find-file :wk "Find file")

                 ;; Buffers
                 "b" '(nil :wk "Buffer")
                 "br" '(revert-buffer :wk "Revert buffer")
                 "bk" '(kill-current-buffer :wk "Kill buffer")

                 "X" '(scratch-buffer :wk "Scratch buffer")

                 ;; Toggle
                 "t" '(nil :wk "Toggle")
                 "tv" '(visual-line-mode :wk "Visual line mode")

                 ;; help
                 "h" '(nil :wk "Help")
                 "hv" '(describe-variable :wk "Describe variable")
                 "hf" '(describe-function :wk "Describe function")
                 "hk" '(describe-key :wk "Describe key")
                 "ht" '(describe-theme :wk "Describe theme")
                 "hp" '(describe-package :wk "Describe package")
                 "hm" '(describe-mode :wk "Describe mode")
                 "hc" '(describe-char :wk "Describe char")
                 "hb" '(describe-bindings :wk "Describe keybindings")

                 "fc" '((lambda () (interactive)
                          (find-file (locate-user-emacs-file
                                      "config.org")))
                        :wk "Open config"))


  (general-define-key
   "C-=" '(text-scale-increase :wk "Increase text size")
   "C--" '(text-scale-decrease :wk "Decrease text size"))
#+end_src

** Which-key
=which-key= is a package that displays the keybindings available after a prefix key. It is very useful to discover new keybindings.

#+begin_src elisp
  (use-package which-key
    :init
    (which-key-mode))
#+end_src

* Completion and navigation
** Corfu
Corfu is a completion framework that provides a horizontal completion UI. It is a very simple package that does not provide any completion backends.

#+begin_src elisp
  (use-package corfu
    ;; Optional customizations
    :custom
    ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                 ;; Enable auto completion
    ;; (corfu-separator ?\s)          ;; Orderless field separator
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin

    :init
    (global-corfu-mode))
#+end_src

It is also possible to use Corfu in the terminal. This requires the =corfu-terminal= package to be installed.

#+begin_src elisp
  (use-package corfu-terminal
    :after corfu
    :init
    (unless (display-graphic-p)
      (corfu-terminal-mode +1)))
#+end_src

Make Corfu sort by last selected candidates.

#+begin_src elisp
  (use-package corfu-history
    :after corfu
    :ensure nil
    :init
    (corfu-history-mode t))
#+end_src

Make Corfu also show up in the minibuffer.

#+begin_src elisp
  (with-eval-after-load 'corfu
    (defun oh/corfu-enable-always-in-minibuffer ()
      "Enable Corfu in the minibuffer if Vertico/Mct are not active."
      (unless (or (bound-and-true-p mct--active)
                  (bound-and-true-p vertico--input)
                  (eq (current-local-map) read-passwd-map))
        (setq-local corfu-echo-delay nil ; Disable automatic echo
                    corfu-popupinfo-delay 0.0)
        (corfu-mode 1)))

    (add-hook 'minibuffer-setup-hook #'oh/corfu-enable-always-in-minibuffer))
#+end_src

** Vertico
Vertico is a completion framework that provides a vertical completion UI. It is a very simple package that does not provide any completion backends. It is meant to be used with =orderless=.

#+begin_src elisp
  ;; Enable vertico
  (use-package vertico
    :init
    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t)

    (vertico-mode))

    ;; Different scroll margin
    ;; (setq vertico-scroll-margin 0)

    ;; Show more candidates
    ;; (setq vertico-count 20))

    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    ;; (setq vertico-cycle t)
#+end_src

Save history across Emacs sessions. Vertico sorts by history position.

#+begin_src elisp
  (use-package savehist
    :ensure nil
    :init
    (savehist-mode))
#+end_src

Allow using different vertico configurations for different prompts.

#+begin_src elisp
  (use-package vertico-multiform
    :ensure nil
    :demand t
    :load-path
    (lambda () (expand-file-name "vertico/extensions" elpaca-builds-directory))
    :after vertico)
#+end_src

Allow displaying the vertico completions in a grid

#+begin_src elisp
  (use-package vertico-grid
    :after vertico
    :ensure nil
    :load-path
    (lambda ()
      (expand-file-name "vertico/extensions" elpaca-builds-directory)))
#+end_src

** Orderless
Orderless is a completion style that allows matching candidates in any order. It is very useful to find candidates when you don't remember the exact order of the characters.

#+begin_src elisp
  (use-package orderless
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))
#+end_src

** Marginalia
Marginalia is a package that displays additional information about the candidates in the minibuffer. It is very useful to find the right candidate.

#+begin_src elisp
  (use-package marginalia
    :after vertico
    ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
    ;; available in the *Completions* buffer, add it to the
    ;; `completion-list-mode-map'.
    :bind (:map minibuffer-local-map
           ("M-A" . marginalia-cycle))

    :init

    ;; Marginalia must be activated in the :init section of use-package such that
    ;; the mode gets enabled right away. Note that this forces loading the
    ;; package.
    (marginalia-mode))
#+end_src

It's also nice to have some nice looking icons for the completion candidates. This requires the =nerd-fonts= package to be installed.

#+begin_src elisp
  (use-package nerd-icons-completion
    :after marginalia
    :init
    (nerd-icons-completion-mode)
    (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup))
#+end_src

** Consult
Consult is a package that provides a set of commands for searching and navigating. It is very useful to find files, buffers, etc.

#+begin_src elisp
  (use-package consult
    ;; :requires recentf
    :custom
    (consult-buffer-sources
     '(consult--source-hidden-buffer
       consult--source-modified-buffer
       consult--source-buffer
       ;; +consult-source-special
       consult--source-recent-file
       consult--source-file-register
       consult--source-bookmark
       consult--source-project-buffer-hidden
       consult--source-project-recent-file-hidden))

    :general
    (oh/leader-key
      "bb" '(consult-buffer :wk "buffer")
      "bB" '(consult-buffer-other :wk "buffer")
      "sg" '(consult-ripgrep :wk "ripgrep")
      "ss" '(consult-line :wk "consult-line")
      "fr" '(consult-recent-file :wk "consult-recent-file")
      "yy" '(consult-yank-pop :wk "consult-yank-pop")
      "ce" '(consult-flymake :wk "consult-flymake")
      "hi" '(consult-info :wk "info"))

    (oh/leader-key org-mode-map
      "mh" '(consult-org-heading :wk "consult org heading"))

    :config
    (recentf-mode 1))

    ;; (defvar +consult-special-filter "\\`\\*.*\\*\\'")
    ;; (defvar +consult-source-special
    ;;   `(:name      "Special"
    ;;     :narrow    ?x
    ;;     ;; :hidden t
    ;;     :category  buffer
    ;;     :face      consult-buffer
    ;;     :history   buffer-name-history
    ;;     ;; Specify either :action or :state
    ;;     ;; :action    ,#'consult--buffer-action ;; No preview
    ;;     :state  ,#'consult--buffer-state  ;; Preview
    ;;     :items
    ;;     ,(lambda () (consult--buffer-query
    ;;                  :sort 'visibility
    ;;                  :as #'buffer-name
    ;;                  :exclude (remq +consult-special-filter consult-buffer-filter)
    ;;                  ;; :include '(+consult-special-filter)
    ;;                  :mode 'special-mode)))
    ;;   "special buffer source.")

    ;; (add-to-list 'consult-buffer-filter +consult-special-filter))

#+end_src

* Project management
** Magit

#+begin_src elisp
  (use-package magit
    :ensure nil
    :custom
    (magit-display-buffer-function
     #'magit-display-buffer-same-window-except-diff-v1)

    :general
    (oh/leader-key
      "gg" '(magit-status :wk "magit")
      "gb" '(magit-blame-addition :wk "blame"))
    ('magit-mode-map
     "w" 'magit-worktree
     "h" 'magit-patch))
#+end_src

#+begin_src elisp
  (use-package seq
    :init
    (unload-feature 'seq 'force))
#+end_src

Magit-todos for integrating TODO keywords with magit's overview screen

#+begin_src elisp
  (use-package magit-todos
    ;; :demand t
    :ensure nil
    ;; :after magit
    :config
    (magit-todos-mode 1)
    (global-hl-todo-mode 1))
#+end_src
** Forge
Make magit integrate with github and other git hosting services.

#+begin_src elisp
  (use-package forge
    :ensure nil
    :after magit
    :demand t
    :custom
    (forge-add-default-bindings nil)
    :config
    (setq auth-sources '("~/.authinfo")))
#+end_src

** Projectile
Projectile is a project management package. It provides a set of commands for finding files, buffers, etc. in a project.

#+begin_src elisp
  (use-package projectile
    :after seq
    :general
    (oh/leader-key
      "p" 'projectile-command-map
      "SPC" 'projectile-find-file)

    :init
    (projectile-mode 1)

    :config
    (let ((project-dirs '("~/projects"
                          "~/knowit"
                          "~/Nextcloud/projects/personal"
                          "~/Nextcloud/projects/knowit"
                          "~/Nextcloud/projects/uio")))
      (setq projectile-project-search-path
            (seq-filter 'file-directory-p project-dirs)))

    (projectile-discover-projects-in-search-path))
#+end_src

* Programming
** Progmode

#+begin_src elisp
  (use-package prog-mode
    :ensure nil
    :hook (prog-mode . (lambda ()
                         (editorconfig-mode 1))))
#+end_src

** Eglot
Eglot is a client for Language Server Protocol (LSP). It is a protocol that allows for IDE-like features such as code completion, code navigation, etc. It is supported by many programming languages.

#+begin_src elisp
  (use-package eglot
    :ensure nil
    ;; :hook (prog-mode . eglot-ensure)
    :general
    (oh/leader-key eglot-mode-map
     "ca" '(eglot-code-actions :wk "code actions")
     "cr" '(eglot-rename :wk "rename")
     "cf" '(eglot-format :wk "format")
     "cn" '(consult-imenu :wk "navigate symbols")
     "cm" '(consult-imenu-multi :wk "navigate symbols (multi)")
     "cd" '(consult-lsp-diagnostics :wk "diagnostics")))

#+end_src
** LSP-mode
LSP-mode is another lsp implementation for emacs. [[https://emacs-lsp.github.io/lsp-mode/page/languages/][Here]] is some instructions for each language. There is also some information about different language-server [[https://langserver.org/][here]].

#+begin_src elisp
  (use-package lsp-mode
    :commands
    (lsp-deferred lsp)

    :general
    (oh/leader-key lsp-mode-map
      "cr" '(lsp-rename :wk "rename")
      "cn" '(consult-imenu :wk "navigate symbols")
      "cm" '(consult-imenu-multi :wk "navigate symbols (multi)")
      "cd" '(consult-lsp-diagnostics :wk "diagnostics")
      "ca" '(lsp-execute-code-action :wk "code action")
      "cf" '(lsp-format-buffer :wk "format buffer")
      "ch" '(lsp-describe-thing-at-point :wk "describe thing"))
    ('normal lsp-mode-map
      "gr" '(lsp-find-references :wk "find references")
      "gd" '(lsp-find-definition :wk "find definition"))

    :custom
    (lsp-warn-no-matched-clients nil)
    (lsp-completion-provider :none) ;; I use Corfu instead!
    (lsp-keymap-prefix nil)
    (lsp-headerline-breadcrumb-enable nil)
    (eldoc-display-functions '(eldoc-display-in-buffer))
    (lsp-idle-delay 0)

    (lsp-inlay-hint-enable t)
    :init
    ;; Performance
    (setq read-process-output-max (* 1024 1024)) ;; 1mb

    ;; Completion
    (defun my/lsp-mode-setup-completion ()
      (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
            '(orderless)))) ;; Configure orderless

  (use-package lsp-ui
    :after lsp-mode

    :custom
    (lsp-ui-doc-enable nil)
    (lsp-ui-doc-show-with-cursor nil)
    (lsp-ui-doc-show-with-mouse nil)

    :hook
    (lsp-mode . lsp-ui-mode))

    ;; :general)
    ;; (oskah/leader-keys
    ;;   "cdf" '(lsp-ui-doc-focus-frame :wk "focus frame")
    ;;   "cdd" '(lsp-ui-doc-show :wk "show documentation")
    ;;   "cdc" '(lsp-ui-doc-hide :wk "hide documentation")))

    ;; ('normal 'lsp-ui-mode-map
    ;;   "K" 'lsp-ui-doc-show :wk "show documentation"))

  (use-package consult-lsp
    :after lsp-mode)
#+end_src

*** DAP-mode
The debug component for LSP

#+begin_src elisp
  (use-package dap-mode
    :after lsp-mode
    :config
    (dap-auto-configure-mode))
#+end_src

** Eldoc
Eldoc is a minor mode that shows documentation in the echo area. It is enabled by default in =prog-mode=.

#+begin_src elisp
  (use-package eldoc
    :ensure nil
    :custom
    (eldoc-echo-area-use-multiline-p nil)
    (eldoc-idle-delay 0)
    :config
    (global-eldoc-mode -1))
#+end_src

** Flymake
Flymake is a minor mode that performs on-the-fly syntax checking. It is enabled by default in =prog-mode=.

#+begin_src elisp
  (use-package flymake
    :ensure nil
    :general
    (oh/leader-key
     "ce" '(flymake-show-diagnostic :wk "show diagnostic")))

#+end_src

* Languages
Emacs 29 has built-in support for =tree-sitter=, which is a parser generator tool and an incremental parsing library. It is used to create a syntax highlighting engine that is faster and more accurate than the built-in one. However, Emacs does not ship with any language support for =tree-sitter=, so we'll have to install it ourselves... or have =treesit-auto= to do it for us.

According to the =treesit-auto= documentation, Emacs 30 will ship with better defaults for =tree-sitter=, so hopefully we won't need =treesit-auto= anymore.

#+begin_src elisp
  (use-package treesit-auto
    :demand t
    :custom
    (treesit-auto-install 'prompt)
    :config
    (treesit-auto-add-to-auto-mode-alist 'all)
    (global-treesit-auto-mode))
#+end_src

** Rust

#+begin_src elisp
  (use-package rust-mode
    :hook (rust-ts-mode . eglot-ensure)
    :mode "\\.rs\\'"
    :general
    (oh/leader-key
      "mr" 'rust-run
      "mC" 'rust-run-clippy
      "mt" 'rust-test
      "mc" 'rust-check)
    :custom
    (rust-mode-treesitter-derive t))
#+end_src

** C

#+begin_src elisp
  (use-package c-ts-mode
    :hook (c-ts-mode . eglot-ensure)
    :ensure nil
    :mode
    "\\.c\\'"
    "\\.h\\'")
#+end_src

** Typescript

#+begin_src elisp
  (use-package typescript-ts-mode
    :hook (typescript-ts-mode . eglot-ensure)
    :ensure nil
    :mode "\\.ts\\'")
#+end_src

For editing =.tsx= files, we'll use =jtsx=.

#+begin_src elisp
  (use-package jtsx
    :mode (("\\.jsx?\\'" . jtsx-jsx-mode)
           ("\\.tsx?\\'" . jtsx-tsx-mode))
    :commands jtsx-install-treesit-language
    :hook ((jtsx-jsx-mode . hs-minor-mode)
           (jtsx-tsx-mode . hs-minor-mode)
           (jtsx-jsx-mode . eglot-ensure)
           (jtsx-tsx-mode . eglot-ensure)))
#+end_src

** C#

When in a C# project, it is important to set the variable =lsp-csharp-solution-file= to point to the project solution file (.sln). It is recommended to set this in a =.dir-locals.el= file for the project.

#+begin_src elisp
  (use-package csharp-mode
    :ensure nil
    :hook (csharp-ts-mode . lsp)
    :mode "\\.cs\\'"
    :general
    (:keymaps 'csharp-ts-mode-map
              :states 'normal
              "K" 'lsp-describe-thing-at-point))
#+end_src

** dotnet

#+begin_src elisp
  (use-package sharper
    ;; :after '(csharp-mode csharp-ts-mode)
    :ensure nil
    :general
    (oh/leader-key csharp-ts-mode-map
     "m d" 'sharper-main-transient))
#+end_src

** Json

#+begin_src elisp
  (use-package json-ts-mode
    :hook (json-ts-mode . eglot-ensure)
    :ensure nil
    :mode "\\.json\\'")
#+end_src

** Python

#+begin_src elisp
  (use-package python-ts-mode
    :hook (python-ts-mode . eglot-ensure)
    ;; :hook (python-ts-mode . lsp)
    :ensure nil
    :mode "\\.py\\'")
    ;; :general)
    ;; (:keymaps 'python-ts-mode-map
    ;;  :states '(normal visual)
    ;;  "K" 'lsp-describe-thing-at-point))

    ;; :config
    ;; (lsp-register-custom-settings
    ;;  '(("pyls.plugins.pyls_mypy.enabled" t t)
    ;;    ("pyls.plugins.pyls_mypy.live_mode" nil t)))
    ;;    ;; ("pyls.plugins.pyls_black.enabled" t t)
    ;;    ;; ("pyls.plugins.pyls_isort.enabled" t t)))

    ;; :custom
    ;; (lsp-pylsp-plugins-yapf-enabled t)
    ;; (lsp-pylsp-plugins-flake8-enabled nil))
    ;; (lsp-pylsp-plugins-flake8-max-line-length 80)
    ;; (lsp-pylsp-plugins-pycodestyle-max-line-length 80))
#+end_src

** Elisp

#+begin_src elisp
  (use-package parinfer-rust-mode
    :hook
    ;; (emacs-lisp-mode . parinfer-rust-mode)
    (emacs-lisp-mode . (lambda ()
                        (electric-pair-local-mode -1)
                        (parinfer-rust-mode 1)))

    :general
    (:keymaps 'emacs-lisp-mode-map
       :states 'normal
       "K" #'helpful-at-point)

    :init
    (setq parinfer-rust-auto-download t)
    :config
    (add-to-list 'oh/electric-pair-mode-blacklist-modes 'parinfer-rust-mode))

#+end_src

** Nix

#+begin_src elisp
  (use-package nix-mode
    :ensure nil
    ;; :hook (nix-mode . eglot-ensure)
    :mode "\\.nix\\'")
#+end_src

** LaTex

#+begin_src elisp
  (use-package TeX-latex-mode
    :ensure nil
    :mode ("\\.tex\\'" . TeX-latex-mode)
    :hook
    (TeX-mode . eglot-ensure)
    (TeX-mode . (lambda () (auto-fill-mode)))
    (TeX-mode . (lambda () (truncate-lines nil)))
    (TeX-mode . (lambda () (reftex-mode 1)))
    :custom
    (LaTeX-electric-left-right-brace t)
    (TeX-view-program-selection '((output-pdf "PDF Tools")))
    (TeX-source-correlate-start-server t)
    (TeX-auto-save t)
    (TeX-parse-self t)
    (TeX-master nil)
    :init
    (load "auctex.el" nil t t)
    ;; Use pdf-tools to open PDF files

    ;; Update PDF buffers after successful LaTeX runs
    (add-hook 'TeX-after-compilation-finished-functions
               #'TeX-revert-document-buffer))
#+end_src

CDLatex makes writing math a pleasure.

#+begin_src elisp
  (use-package cdlatex
    :hook (LaTeX-mode . cdlatex-mode))
#+end_src

** Dot

#+begin_src elisp
  (use-package graphviz-dot-mode
    :mode "\\.dot\\'"
    :config
    (setq graphviz-dot-indent-width 4))
#+end_src

** PlantUML

#+begin_src elisp
  (use-package plantuml-mode
    :mode
    ("\\.plantuml\\'" . plantuml-mode)
    ("\\.puml\\'" . plantuml-mode)
    :init
    (with-eval-after-load 'org
      (add-to-list 'org-src-lang-modes
                   '("plantuml" . plantuml))
      (add-to-list 'org-babel-load-languages
                   '(plantuml . t)))

    :custom
    (plantuml-default-exec-mode 'executable)
    (org-plantuml-exec-mode 'plantuml)
    (plantuml-indent-level 4)
    :config
    (setq plantuml-output-type "png"))
#+end_src

** biblatex

#+begin_src elisp
  (use-package bibtex
    :ensure nil
    :hook (bibtex-mode . eglot-ensure)
    :general
    (oh/leader-key bibtex-mode-map
      "mri" '(citar-insert-bibtex :wk "Insert bibtex")))
#+end_src

* Biblio
To manage my bibliography entries, I use [[https:zotero.org/][zotero]] which allows me to easily use their browser extension to add the bibliography entries to the database. It also automatically downloads the PDF, belonging to the entry. I also use [[https://github.com/jlegewie/zotfile][zotfile]] to automatically rename the downloaded PDFs, and to place them in the ~library-path~ which is in a cloud folder and which =citar= can look through to find the files belonging to the bibliography entries. I also use [[https://github.com/retorquere/zotero-better-bibtex][better-bibtex]] which automatically exports my bibliography to a BibLatex file every time the bibliography is updated, which =citar= then looks through. =better-bibtex= also takes care of the cite-keys, which allows me to set the naming scheme in =zotfile= to ~{%b}~ which makes it use the cite-key as filename. This step is crucial, as =citar= finds the matching file for an entry, by matching the filename with the cite-key.

Some other zotero plugins I use are:
- [[https://github.com/scitedotai/scite-zotero-plugin/][scite]] is also a very nice site, for finding relevant papers as well as to check how trustworthy an article is. Its =zotero= plugin makes it easy to get this information for your entire bibliography database.
- [[https://github.com/PubPeerFoundation/pubpeer_zotero_plugin][PubPeer]] which is a cite for sharing comments about publications.

#+begin_src elisp
  (defvar oh/bib-files
     '("~/Nextcloud/.org/references.bib"
       "~/Nextcloud/.org/bibliography/zotero.bib"
       "~/Nextcloud/.org/bibliography/uni/IN3000.bib"
       "~/Nextcloud/.org/bibliography/uni/IN2000 gang.bib"
       "~/Nextcloud/.org/bibliography/uni/IN2120_gang-midterm.bib"))

  (defvar oh/roam-dir
    "~/Nextcloud/org_notes/roam/bibliography/")

  (defvar oh/library-dir
    "~/Nextcloud/.org/library/")
#+end_src

** org-cite

#+begin_src elisp
  (use-package oc
    :ensure nil
    :after org
    :custom
    (org-cite-csl-styles-dir "~/Zotero/styles")
    (org-cite-global-bibliography oh/bib-files)
    (org-cite-export-processors
     '((t csl))))
       ;; (latex biblatex))))
#+end_src

** citar

#+begin_src elisp
  (use-package citar
    :hook
    (org-mode . citar-capf-setup)
    (latex-mode . citar-capf-setup)
    :general
    (oh/leader-key '(org-mode-map LaTeX-mode-map)
      "mr" '(:ignore t :which-key "references")
      "mrc" '(citar-insert-citation :which-key "insert citation")
      "mre" '(citar-export-local-bib-file :which-key "export local bib file"))

    (oh/leader-key
      "nr" '(:ignore t :wk "references")
      "nro" '(citar-open :wk "open resource"))

    :custom
    (citar-citeproc-csl-styles-dir "~/Zotero/styles/")
    (citar-citeproc-csl-style "apa.csl")
    (bibtex-dialect 'biblatex)
    (citar-bibliography oh/bib-files)
    (citar-notes-paths (list oh/roam-dir))          ; List of directories for reference nodes
    (citar-open-note-function 'orb-citar-edit-note) ; Open notes in `org-roam'
    (citar-at-point-function 'embark-act)           ; Use `embark'
    (org-cite-insert-processor 'citar)
    (org-cite-follow-processor 'citar)
    (org-cite-activate-processor 'citar)

    :config
    (defvar citar-indicator-files-icons
      (citar-indicator-create
       :symbol (nerd-icons-faicon
                "nf-fa-file_o"
                :face 'nerd-icons-green
                :v-adjust -0.1)
       :function #'citar-has-files
       :padding "  " ; need this because the default padding is too low for these icons
       :tag "has:files"))
    (defvar citar-indicator-links-icons
      (citar-indicator-create
       :symbol (nerd-icons-codicon
                "nf-cod-link"
                :face 'nerd-icons-orange
                :v-adjust 0.01)
       :function #'citar-has-links
       :padding "  "
       :tag "has:links"))
    (defvar citar-indicator-notes-icons
      (citar-indicator-create
       :symbol (nerd-icons-codicon
                "nf-cod-note"
                :face 'nerd-icons-blue
                :v-adjust -0.3)
       :function #'citar-has-notes
       :padding "    "
       :tag "has:notes"))
    (defvar citar-indicator-cited-icons
      (citar-indicator-create
       :symbol (nerd-icons-faicon
                "nf-fa-circle_o"
                :face 'nerd-icon-green)
       :function #'citar-is-cited
       :padding "  "
       :tag "is:cited"))

    (setq citar-indicators
      (list citar-indicator-files-icons
            citar-indicator-links-icons
            citar-indicator-notes-icons
            citar-indicator-cited-icons)))

  (use-package citar-embark
    :after citar
    :no-require
    :config (citar-embark-mode))

  (use-package citar-org
    :ensure nil
    :after (oc citar)
    :custom
    (org-cite-insert-processor 'citar)
    (org-cite-follow-processor 'citar)
    (org-cite-activate-processor 'citar))
#+end_src

** citar-org-roam

#+begin_src elisp
  (use-package citar-org-roam
    :after (citar org-roam)
    :config (citar-org-roam-mode)
    :general
    (oh/leader-key
      "nrc" '(citar-org-roam-ref-add :wk "add ref"))
    :custom
    (citar-org-roam-capture-template-key "n")
    :config
    (add-to-list 'org-roam-capture-templates
       '("n" "literature note" plain
               "%?"
               :target
               (file+head
                "%(expand-file-name (or citar-org-roam-subdir \"\") org-roam-directory)/${citar-citekey}.org"
                "#+title: ${citar-citekey} (${citar-date}). ${note-title}.\n#+created: %U\n#+last_modified: %U\n\n")
               :unnarrowed t)))
#+end_src

* Major Modes
** Special
A special major mode is intended to view specially formatted data
rather than files.  These modes usually use read-only buffers.

#+begin_src elisp
  (use-package special
    :ensure nil
    :hook (special-mode . visual-line-mode))
#+end_src

** Org-mode
*** Org

#+begin_src elisp
  (use-package org
    :ensure nil
    :hook
    (org-mode . variable-pitch-mode)
    (org-mode . (lambda () (visual-line-mode 1)))

    :custom
    (org-export-with-smart-quotes t)
    (org-hide-emphasis-markers t)		; Hide markup characters
    (org-startup-indented t)
    (org-pretty-entities t)
    (org-use-sub-superscripts "{}")
    (org-hide-emphasis-markers t)
    (org-startup-with-inline-images t)
    (org-image-actual-width '(300))
    (org-auto-align-tags nil)
    (org-tags-column 0)
    (org-fold-catch-invisible-edits 'show)
    (org-elipsis "‚Ä¶")

    :config
    ;; Pretty bullets
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "‚Ä¢"))))))
    (add-to-list 'org-latex-packages-alist '("" "listings"))
    (with-eval-after-load 'ox-latex
      (setq org-latex-listings 'listings)
      (setq org-latex-listings-options
            '(("basicstyle" "\\ttfamily\\footnotesize")
              ("breaklines" "true")
              ("showstringspaces" "false")
              ("postbreak" "\\mbox{$\\hookrightarrow$\\space}")
              ("xleftmargin" "2.8em")
              ("framexleftmargin" "2.8em")
              ("numbers" "left")
              ("tabsize" "2"))))

    :custom-face
    (org-level-1 ((t (:inherit outline-1 :height 1.5))))
    (org-level-2 ((t (:inherit outline-2 :height 1.3))))
    (org-level-3 ((t (:inherit outline-3 :height 1.2))))
    (org-level-4 ((t (:inherit outline-4 :height 1.1))))
    (org-level-5 ((t (:inherit outline-5 :height 1.0))))
    (org-level-6 ((t (:inherit outline-6 :height 1.0))))
    (org-level-7 ((t (:inherit outline-7 :height 1.0))))
    (org-level-8 ((t (:inherit outline-8 :height 1.0))))

    (org-block ((t (:inherit fixed-pitch))))
    (org-code ((t (:inherit (shadow fixed-pitch)))))

    (org-table ((t (:inherit fixed-pitch)))))
#+end_src

*** Org-appear
Toggle the visibility of emphasis markers when the cursor is on the line.

#+begin_src elisp :lexical no
  (use-package org-appear
    :hook (org-mode . org-appear-mode))
#+end_src

*** org-fragtog
Automatically toggle =org-preview-latex-fragment= when the cursor is on the line.

#+begin_src elisp
  (use-package org-fragtog
    :hook (org-mode . org-fragtog-mode))
#+end_src

*** Org-modern
Provides a clean look for org-mode.

#+begin_src elisp
  (use-package org-modern
    :hook (org-mode . org-modern-mode)
    :custom
    (org-modern-table nil))
#+end_src

*** src-block completion

#+begin_src elisp
  (use-package org-block-capf
    :ensure
    (org-block-capf :type git :host github :repo "xenodium/org-block-capf")
    :custom
    (org-block-capf-explicit-lang-defaults nil)

    :after org
    :hook (org-mode . org-block-capf-add-to-completion-at-point-functions))
#+end_src

*** PDF preview
Show pdf previews as inline images.

#+begin_src elisp
  (use-package org-inline-pdf
    :after org
    :hook (org-mode . org-inline-pdf-mode))
#+end_src

*** Download

#+begin_src elisp
  (use-package org-download
    :after org
    :custom
    (org-download-method 'attach)
    :general
    (oh/leader-key org-mode-map
      "map" 'org-download-clipboard
      "maf" 'org-download-screenshot
      "mar" 'org-download-rename-at-point))
#+end_src

*** Present
It is nice sometimes to use org for presentations.

#+begin_src elisp
  (use-package org-present
    :after org
    :general
    (oh/leader-key 'org-mode-map
      "tp" '(org-present :wk "present"))
    :config
    (setq org-present-text-scale 2)
    (setq org-present-startup-folded t)
    (add-hook 'org-present-mode-hook
              (lambda ()
                ;; (focus-mode t)
                (org-present-big)
                (org-appear-mode -1)
                (org-present-read-only)
                (setq header-line-format " ")))
    (add-hook 'org-present-mode-quit-hook
              (lambda ()
                ;; (focus-mode -1)
                (org-present-small)
                (org-appear-mode t)
                (org-present-read-write)
                (setq header-line-format nil)
                (nano-modeline-org-mode))))
#+end_src

*** oc-pandoc
Export dispatcher using pandoc

#+begin_src elisp
  (use-package ox-pandoc
    :after org)
#+end_src

*** org-roam

#+begin_src elisp
  (use-package org-roam
    :custom
    (org-roam-completion-everywhere t)
    ;; (org-roam-node-display-template "${title:*} ${tags:10}")
    (org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
    (org-roam-directory (file-truename "~/Nextcloud/org_notes/roam"))
    (org-roam-dailies-directory (file-truename "~/Nextcloud/org_notes/daily"))
    :general
    (oh/leader-key
      "nf" '(org-roam-node-find :wk "find")
      "nc" '(org-roam-capture :wk "capture")
      "ni" '(org-roam-node-insert :wk "insert")
      "nb" '(org-roam-buffer-toggle :wk "buffer")
      "nt" '(org-roam-tag-add :wk "add tag")
      "nl" '(consult-org-roam-backlinks :wk "backlinks")
      "nrr" '(org-roam-ref-find :wk "find ref")
      "nR" '(org-roam-refile :wk "refile")
      "na" '(org-roam-alias-add :wk "add alias"))

    :config
    (org-roam-db-autosync-mode 1))
#+end_src

*** org-roam-ui

#+begin_src elisp
  (use-package org-roam-ui
      ;; :after org-roam
  ;;         normally we'd recommend hooking orui after org-roam, but since
  ;;         org-roam does not have a hookable mode anymore, you're advised to
  ;;         pick something yourself if you don't care about startup time, use
  ;;  :hook (after-init . org-roam-ui-mode)
    :general
    (oh/leader-key
      "ng" '(org-roam-ui-mode :which-key "org-roam-ui"))
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))

#+end_src

*** consult-org-roam

#+begin_src elisp
  (use-package consult-org-roam
     :after org-roam
     :init
     ;; Activate the minor mode
     (consult-org-roam-mode 1)
     :custom
     ;; Use `ripgrep' for searching with `consult-org-roam-search'
     (consult-org-roam-grep-func #'consult-ripgrep)
     ;; Configure a custom narrow key for `consult-buffer'
     (consult-org-roam-buffer-narrow-key ?r)
     ;; Display org-roam buffers right after non-org-roam buffers
     ;; in consult-buffer (and not down at the bottom)
     (consult-org-roam-buffer-after-buffers t)
     :config
     ;; Eventually suppress previewing for certain functions
     (consult-customize
      consult-org-roam-forward-links
      :preview-key "M-."))
     ;; :bind)
     ;; Define some convenient keybindings as an addition
     ;; ("C-c n e" . consult-org-roam-file-find)
     ;; ("C-c n b" . consult-org-roam-backlinks)
     ;; ("C-c n l" . consult-org-roam-forward-links)
     ;; ("C-c n r" . consult-org-roam-search))
#+end_src

*** org-noter

#+begin_src elisp
  (use-package org-noter
    :after org
    :general
    (oh/leader-key
      "ne" '(org-noter :which-key "org-noter"))
    ('(normal visual insert emacs)
      'org-noter-doc-mode-map
     "i" '(org-noter-insert-note :which-key "insert note"))
    :custom
    (org-noter-auto-save-last-location t)
    (org-noter-notes-search-path
     '("~/Nextcloud/org_notes" "~/Nextcloud/org_notes/roam/bibliography")))
#+end_src

** Markdown

#+begin_src elisp
  (use-package markdown-mode
    :ensure nil
    :mode "\\.md\\'"
    :hook (markdown-mode . olivetti-mode)
    :custom
    (markdown-hide-markup t))


#+end_src

** Dired

#+begin_src elisp
  (use-package dired
    :ensure nil
    :commands (dired dired-jump)

    :custom
    (dired-listing-switches "-agohv --group-directories-first")
    (dired-kill-when-opening-new-dired-buffer t)
    (dired-async-mode t)

    :general
    (oh/leader-key
      "fd" '(dired-jump :which-key "dired jump")
      "fD" '(dired-jump-other-window :which-key "dired"))

    ('normal 'dired-mode-map
      "h" 'dired-up-directory
      "l" 'dired-find-file))
#+end_src

** Eww

The emacs web browser

#+begin_src elisp
  (use-package eww
   :ensure nil
   :commands (oh/switch-to-eww-buffer)
   ;; :custom
   ;; (shr-use-fonts nil)
   :general
   (oh/leader-key
     "ow" '(oh/switch-to-eww-buffer :wk "eww"))

   :config
   (defun oh/switch-to-eww-buffer ()
     "Switches to an existing EWW buffer, if one exists."
     (interactive)
     (let ((eww-buf (catch 'found
                      (dolist (buf (buffer-list))
                        (when (with-current-buffer buf
                                (eq major-mode 'eww-mode))
                          (throw 'found buf))))))
       (if eww-buf
           (switch-to-buffer eww-buf)
         (call-interactively 'eww)))))
#+end_src

** Vterm

#+begin_src elisp
  (use-package vterm
    ;; :hook
    ;; (vterm-mode . oh/vterm-start-tmux)

    :general
    (oh/leader-key
      "pv" '(projectile-run-vterm :wk "projectile vterm")
      "pV" '(projectile-run-vterm-other-window :wk "projectile vterm other window")
      "ov" '(vterm :wk "vterm")
      "oV" '(vterm-other-window :wk "vterm other window"))

    :config
    (defun oh/vterm-start-tmux ()
      (interactive)
      (run-at-time "0.2" nil
                   (lambda ()
                     (vterm-send-string "tmux new")
                     (vterm-send-return)))))
#+end_src

** Direnv
Integrate [[https://direnv.net/][direnv]] in emacs.

#+begin_src elisp
  ;; (use-package direnv
  ;;  :init
  ;;  (direnv-mode))
  (use-package direnv
   :after (prog-mode)
   :demand t
   :config
   (direnv-mode))
#+end_src

** PDF

#+begin_src elisp
  (use-package pdf-tools
    :ensure nil
    :mode ("\\.pdf\\'" . pdf-view-mode)
    ;; :requires pdf-outline
    :commands (pdf-view-mode)
    :hook
    (pdf-view-mode-hook . evil-normal-state)
    :config
    (require 'pdf-outline))
    ;; (pdf-tools-install))
#+end_src

* Misc
** Wakatime
Wakatime is a service that tracks your coding activity. It is very useful to see how much time you spend on a project.

I've encountered issues with the =wakatime-cli= program not functioning properly. As a result, I've discovered that the most dependable method to install Wakatime is by using the Wakatime VS Code extension and simply directing it to the binary installed by VS Code.

#+begin_src elisp
  (use-package wakatime-mode
      :custom
      (wakatime-disable-on-error t)
      (wakatime-cli-path "~/.wakatime/wakatime-cli")
      :init
      (global-wakatime-mode))
#+end_src
** Make

#+begin_src elisp
  (use-package makefile-executor
    :hook
    ('makefile-mode-hook 'makefile-executor-mode)
    :general
    (oh/leader-key
      "cb" '(makefile-executor-execute-project-target :wk "Run make command")))
#+end_src

** Copilot

#+begin_src elisp
  ;; accept completion from copilot and fallback to company
  (use-package jsonrpc)

  (use-package copilot
    :hook (prog-mode . copilot-mode)
    :ensure (:host github :repo "copilot-emacs/copilot.el" :files ("dist" "*.el"))
    :general
    (oh/leader-key
      "ta" '(oh/toggle-copilot-mode :wk "copilot"))
    :bind (:map copilot-completion-map
                ("<tab>" . 'copilot-accept-completion)
                ("TAB" . 'copilot-accept-completion)
                ("C-TAB" . 'copilot-accept-completion-by-word)
                ("C-<tab>" . 'copilot-accept-completion-by-word)))


  (defvar oh/electric-pair-mode-blacklist-modes '()
    "Modes where electric-pair-mode should not be enabled")


  (defun oh/toggle-copilot-mode ()
    "Toggle copilot mode."
    (interactive)
    (if (bound-and-true-p copilot-mode)
        (progn (copilot-mode -1)
               (if (not (cl-some (lambda (mode)
                                   (derived-mode-p mode))
                                 oh/electric-pair-mode-blacklist-modes))
                   (electric-pair-mode 1)))
       (progn (copilot-mode 1)
               (electric-pair-mode -1))))
#+end_src
** gptel
Use any LLM in Emacs.

#+begin_src elisp
  (use-package gptel
    ;;:requires seq
    :ensure nil
    :custom
    ;; (gptel-api-key
    ;;  (lambda () (auth-source-pass-get 'secret "openai-key")))
    (gptel-api-key
          (auth-source-pick-first-password :host "api.openai.com"))

    (gptel-model "gpt-4-1106-preview")
    :general
    (oh/leader-key
      "ogg" '(gptel :wk "gptel")
      "ogm" '(gptel-menu :wk "gptel menu")))
#+end_src

** SICP
Of course I need to have the wizard book as info pages :)

#+begin_src elisp
  (use-package sicp
    :after info)
#+end_src

** Mail
To use =mbsync= over a secure connection add
#+begin_example
  SSLType STARTTLS
  SSLVersions TLSv1.2
  CertificateFile ~/.cert/protonmail.crt
#+end_example
to =.mbsyncrc= and put the certificate generated by ~openssl s_client -starttls imap -connect 127.0.0.1:1143 -showcerts~ in =~/.cert/protonmail.crt=, i.e. the lines between (and incluying) =-----BEGIN CERTIFICATE-----= and =-----END CERTIFICATE-----=

Just to make it complete my =.mbsyncrc= file looks as follows
#+begin_src conf :tangle nil
IMAPAccount proton
Host 127.0.0.1
Port 1143
User ohaukeboe@pm.me
SSLType STARTTLS
Pass *****
# CertificateFile /etc/ssl/certs/ca-certificates.crt
CertificateFile ~/.mail/.cert/protonmail.crt

IMAPStore proton-remote
Account proton

MaildirStore proton-local
Subfolders Verbatim
Path ~/.mail/proton/
Inbox ~/.mail/proton/Inbox
Trash ~/.mail/proton/Trash

Channel proton
Far :proton-remote:
Near :proton-local:
Patterns *
Expunge None
CopyArrivalDate yes
Sync All
Create Both
SyncState *
#+end_src
and my =.msmtprc= file looks like:
#+begin_src conf :tangle nil
  # Set default values for all following accounts.
  defaults
  auth           on
  tls            on
  tls_trust_file ~/.mail/.cert/protonmail.crt
  logfile        ~/.msmtp.log

  # Proton
  account        proton
  host           127.0.0.1
  port           1025
  tls_starttls   on
  from           ohaukeboe@pm.me
  user           ohaukeboe@pm.me
  password       *****

  # Set a default account
  account default: proton
#+end_src

#+begin_src elisp
  (use-package mu4e
    :ensure nil
    :defer t
    :if (and (file-exists-p "~/.mail")
             (executable-find "mbsync")
             (executable-find "msmtp")
             (executable-find "mu"))
    :general
    (oh/leader-key
      "om" '(mu4e :which-key "mu4e"))

    :custom
    (mu4e-split-view nil)
    (mail-user-agent 'mu4e-user-agent)
    (shr-use-colors nil)

    :config
    (setq sendmail-program (executable-find "msmtp")
          send-mail-function 'smtpmail-send-it
          mu4e-root-maildir "~/.mail"

          message-sendmail-f-is-evil t
          message-sendmail-extra-arguments '("--read-envelope-from")
          message-send-mail-function 'message-send-mail-with-sendmail
          message-kill-buffer-on-exit t

          mu4e-get-mail-command (concat (executable-find "mbsync") " -a")
          mu4e-change-filenames-when-moving t

          mu4e-use-fancy-chars t)

    (setq mu4e-contexts
          (list
           ;; (make-mu4e-context
           ;;  :name "ifi"
           ;;  :match-func
           ;;  (lambda (msg)
           ;;    (when msg
           ;;      (string-prefix-p "/ifi" (mu4e-message-field msg :maildir))))
           ;;  :vars '((user-mail-address . "oskah@ifi.uio.no")
           ;;          (user-full-name . "Oskar Haukeb√∏e")
           ;;          (mu4e-sent-folder . "/ifi/Sent Items")
           ;;          (mu4e-trash-folder . "/ifi/Deleted Items")
           ;;          (mu4e-drafts-folder . "/ifi/Drafts")
           ;;          (mu4e-refile-folder . "/ifi/Archive")
           ;;          (smtpmail-smtp-user .)))
           (make-mu4e-context
            :name "proton"
            :match-func
            (lambda (msg)
              (when msg
                (string-prefix-p "/proton" (mu4e-message-field msg :maildir))))
            :vars '((user-mail-address . "ohaukeboe@pm.me")
                    (user-full-name . "Oskar Haukeb√∏e")
                    (mu4e-sent-folder . "/Sent")
                    (mu4e-trash-folder . "/Trash")
                    (mu4e-drafts-folder . "/Drafts")
                    (mu4e-refile-folder . "/Archive")
                    (smtpmail-smtp-user . "ohaukeboe@pm.me")
                    (mu4e-compose-signature . nil))))))
#+end_src

Org-msg allows for composing the mail using orgmode, and then send it as beautifull html.

#+begin_src elisp
  (use-package org-msg
      :after mu4e
      :config
      (setq org-msg-options "html-postamble:nil H:5 num:nil ^:{} toc:nil author:nil email:nil \\n:t"
            org-msg-startup "hidestars indent inlineimages"
            org-msg-greeting-fmt "\nHi%s,\n\n"

            org-msg-recipient-names '(("ohaukeboe@pm.me" . "Oskar"))
            org-msg-greeting-name-limit 3
            org-msg-default-alternatives '((new		. (text html))
                                           (reply-to-html	. (text html))
                                           (reply-to-text	. (text)))
            org-msg-convert-citation t
            org-msg-signature "

  Cheers,
  ,#+begin_signature
  Oskar
  ,#+end_signature")
      (org-msg-mode))
#+end_src

#+begin_src elisp
  (use-package mu4e-marker-icons
    :after mu4e
    :init (mu4e-marker-icons-mode 1))
#+end_src

** Vundo
Not undo-tree

#+begin_src elisp
  (use-package vundo
    :custom
    (vundo-glyph-alist vundo-unicode-symbols)
    (vundo-window-max-height 10)
    :general
    (oh/leader-key
      "u" '(vundo :wk "not undo tree")))
#+end_src

** Undo-fu
Save & recover undo steps between Emacs sessions.

#+begin_src elisp
  (use-package undo-fu
    :custom
    (undo-limit (* 64 1024 1024))               ; 64mB.
    (undo-strong-limit (* 96 1024 1024))        ; 96mB.
    (undo-outer-limit (* 10 undo-strong-limit))) ; 960mB.

  (use-package undo-fu-session
    :init
    (undo-fu-session-global-mode))
#+end_src

** Spell check
This sets up spell-checking using both English and Norwegian dictionaries together. It is also necessary to install =hunspell-en_us= and =hunspell-nb=. Jinx is a much faster alternative to flyspell, and it also supports combining dictionaries.

#+begin_src elisp
  (use-package jinx
    :hook (elpaca-after-init . global-jinx-mode)
    :ensure nil
    :custom
    (jinx-languages "en_US nb_NO")

    :general
    (oh/leader-key
      "sc" '(jinx-correct :wk "correct previous")
      "ts" '(jinx-mode :wk "toggle spellcheck"))

    :config
    (global-jinx-mode 1)
    (with-eval-after-load 'vertico
      (add-to-list 'vertico-multiform-categories
                   '(jinx grid
                          ;; (:not indexed)
                          (vertico-grid-annotate . 20)))
      (vertico-multiform-mode 1)))
#+end_src

** Thesaurus

#+begin_src elisp
  (use-package powerthesaurus
    :general
    (oh/leader-key
      "st" '(powerthesaurus-transient :wk "thesaurus")))
#+end_src

** Helpful
A better help buffer
#+begin_src elisp
  (use-package helpful
    :diminish
    ;; :custom
    ;; (counsel-describe-function-function #'helpful-callable)
    ;; (counsel-describe-variable-function #'helpful-variable)
    :general
    ;; ('normal "K" 'helpful-at-point)

    ;; (oh/leader-key
    ;;   "hp" 'describe-package
    ;;   "ht" 'describe-theme
    ;;   "hv" 'describe-variable
    ;;   "hf" 'describe-function
    ;;   "hk" 'describe-key)

    :bind
    ([remap describe-function] . helpful-function)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-key] . helpful-key)
    ([remap describe-command] . helpful-command))
#+end_src

** Devilry
#+begin_src elisp
  (use-package devilry-mode
    :ensure (devilry-mode :type git :host github :repo
                          "ohaukeboe/devilry-mode")
    :config
    (setq dm-java-compilation nil)
    :general
    (oh/leader-key
      "tD" '(devilry-mode :wk "devilry"))
    (oh/leader-key '(devilry-mode-map)
      "md" '(dm-do-oblig :wk "do oblig")
      "mc" '(desktop-hard-clear :wk "clear desktop")))
#+end_src

** Olivetti
Make text more readable by narrowing the text at the center of the screen. This is useful for writing prose with visual-line-mode enabled.

#+begin_src elisp
  (use-package olivetti
    :commands olivetti-mode
    :hook (org-mode . olivetti-mode)
    :custom (olivetti-body-width 90)
    :general
    (oh/leader-key
      "to" '(olivetti-mode :wk "olivetti")))
#+end_src

** Dashboard
A prettier startup screen

#+begin_src elisp
  (use-package dashboard
    :init
    (add-hook 'elpaca-after-init-hook #'dashboard-insert-startupify-lists)
    (add-hook 'elpaca-after-init-hook #'dashboard-initialize)
    (dashboard-setup-startup-hook)

    :custom
    (dashboard-projects-backend 'projectile)
    (dashboard-set-heading-icons t)
    (dashboard-set-file-icons t)
    (dashboard-display-icons-p t)     ; display icons on both GUI and terminal
    (dashboard-icon-type 'nerd-icons) ; use `nerd-icons' package
    (dashboard-week-agenda nil)       ; nil for only current day
    ;;                                   ; and t for the whole week
    (dashboard-center-content t)
    ;; ;; (dashboard-startup-banner 2)
    (dashboard-items '((recents  . 5)
                       (bookmarks . 5)
                       (projects . 5)
                       (agenda . 5)
                       (registers . 5))))

#+end_src

* Post Init

Lower the =gc-cons-threshold= and =gc-cons-percentage= variables to a sane value.

#+begin_src elisp
  (setq gc-cons-threshold 16777216
        gc-cons-percentage 0.1)
#+end_src

Write the startup time to the *Messages* buffer.

#+begin_src elisp
  (defun oh/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                      (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'emacs-startup-hook #'oh/display-startup-time)
#+end_src
